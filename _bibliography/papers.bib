@INPROCEEDINGS{9190851,
  abbr={IEEE Conference},
  html={http://ecommons.luc.edu/cs_facpubs/250},
  pdf={http://ecommons.luc.edu/cs_facpubs/250},
  author={S. {Aghajanzadeh} and R. {Naidu} and S. -H. {Chen} and C. {Tung} and A. {Goel} and Y. -H. {Lu} and G. K. {Thiruvathukal}},
  booktitle={2020 IEEE International Conference on Image Processing (ICIP)}, title={Camera Placement Meeting Restrictions of Computer Vision},
  year={2020},
  volume={},
  number={},
  pages={3254-3258},
  abstract={In the blooming era of smart edge devices, surveillance cameras have been deployed in many locations. Surveillance cameras are most useful when they are spaced out to maximize coverage of an area. However, deciding where to place cameras is an NP-hard problem and researchers have proposed heuristic solutions. Existing work does not consider a significant restriction of computer vision: in order to track a moving object, the object must occupy enough pixels. The number of pixels depends on many factors (How far away is the object? What is the camera resolution? What is the focal length?). In this study, we propose a camera placement method that identifies effective camera placement in arbitrary spaces and can account for different camera types as well. Our strategy represents spaces as polygons, then uses a greedy algorithm to partition the polygons and determine the cameras’ locations to provide the desired coverage. Our solution also makes it possible to perform object tracking via overlapping camera placement. Our method is evaluated against complex shapes and real-world museum floor plans, achieving up to 85% coverage and 25% overlap.},
  keywords={Cameras;Computer vision;Surveillance;Shape;Object tracking;NP-hard problem;Security;Computational Geometry;Computer Vision;Camera Placement},
  doi={10.1109/ICIP40778.2020.9190851},
  ISSN={2381-8549},
  month={Oct},
}


@article{10.1145/3408062,
  abbr={ACM Journal},
  html={http://ecommons.luc.edu/cs_facpubs/254},
  pdf={http://ecommons.luc.edu/cs_facpubs/254},
  author = {Goel, Abhinav and Aghajanzadeh, Sara and Tung, Caleb and Chen, Shuo-Han and Thiruvathukal, George K. and Lu, Yung-Hsiang},
  title = {Modular Neural Networks for Low-Power Image Classification on Embedded Devices},
  year = {2020},
  issue_date = {October 2020},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {26},
  number = {1},
  issn = {1084-4309},
  url = {https://doi.org/10.1145/3408062},
  doi = {10.1145/3408062},
  abstract = {Embedded devices are generally small, battery-powered computers with limited hardware resources. It is difficult to run deep neural networks (DNNs) on these devices, because DNNs perform millions of operations and consume significant amounts of energy. Prior research has shown that a considerable number of a DNN’s memory accesses and computation are redundant when performing tasks like image classification. To reduce this redundancy and thereby reduce the energy consumption of DNNs, we introduce the Modular Neural Network Tree architecture. Instead of using one large DNN for the classifier, this architecture uses multiple smaller DNNs (called modules) to progressively classify images into groups of categories based on a novel visual similarity metric. Once a group of categories is selected by a module, another module then continues to distinguish among the similar categories within the selected group. This process is repeated over multiple modules until we are left with a single category. The computation needed to distinguish dissimilar groups is avoided, thus reducing redundant operations, memory accesses, and energy. Experimental results using several image datasets reveal the effectiveness of our proposed solution to reduce memory requirements by 50% to 99%, inference time by 55% to 95%, energy consumption by 52% to 94%, and the number of operations by 15% to 99% when compared with existing DNN architectures, running on two different embedded systems: Raspberry Pi 3 and Raspberry Pi Zero.},
  journal = {ACM Trans. Des. Autom. Electron. Syst.},
  month = oct,
  articleno = {1},
  numpages = {35},
  keywords = {image classification, Low-power}
}


@inproceedings{10.1145/3370748.3406569,
  abbr={IEEE Conference},
  html={http://ecommons.luc.edu/cs_facpubs/252},
  pdf={http://ecommons.luc.edu/cs_facpubs/252},
  author = {Goel, Abhinav and Tung, Caleb and Aghajanzadeh, Sara and Ghodgaonkar, Isha and Ghosh, Shreya and Thiruvathukal, George K. and Lu, Yung-Hsiang},
  title = {Low-Power Object Counting with Hierarchical Neural Networks},
  year = {2020},
  isbn = {9781450370530},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/3370748.3406569},
  doi = {10.1145/3370748.3406569},
  abstract = {Deep Neural Networks (DNNs) achieve state-of-the-art accuracy in many computer vision tasks, such as object counting. Object counting takes two inputs: an image and an object query and reports the number of occurrences of the queried object. To achieve high accuracy, DNNs require billions of operations, making them difficult to deploy on resource-constrained, low-power devices. Prior work shows that a significant number of DNN operations are redundant and can be eliminated without affecting the accuracy. To reduce these redundancies, we propose a hierarchical DNN architecture for object counting. This architecture uses a Region Proposal Network (RPN) to propose regions-of-interest (RoIs) that may contain the queried objects. A hierarchical classifier then efficiently finds the RoIs that actually contain the queried objects. The hierarchy contains groups of visually similar object categories. Small DNNs at each node of the hierarchy classify between these groups. The RoIs are incrementally processed by the hierarchical classifier. If the object in an RoI is in the same group as the queried object, then the next DNN in the hierarchy processes the RoI further; otherwise, the RoI is discarded. By using a few small DNNs to process each image, this method reduces the memory requirement, inference time, energy consumption, and number of operations with negligible accuracy loss when compared with the existing techniques.},
  booktitle = {Proceedings of the ACM/IEEE International Symposium on Low Power Electronics and Design},
  pages = {163168},
  numpages = {6},
  keywords = {object counting, neural networks, low-power},
  location = {Boston, Massachusetts},
  series = {ISLPED '20}
}

@article{Dematties2020,
  abbr={Lecture},
  html = {https://ecommons.luc.edu/cs_facpubs/253/},
  pdf = {https://ecommons.luc.edu/cs_facpubs/253/},
  author = {Dario Dematties and Silvio Rizzi and George K. Thiruvathukal},
  title = "{Towards High-End Scalability on Bio-Inspired Computational Models}",
  year = "2020",
  month = "8",
  url = "https://figshare.com/articles/presentation/Towards_High-End_Scalability_on_Bio-Inspired_Computational_Models/12762260",
  doi = "10.6084/m9.figshare.12762260.v2",
  abstract = {Presentation at CyberColombia's Third HPC Summer School: Bio and Data Science Part 1 describes our work on developing a neurocomputational model inspired in specific features found in the mammalian cortex. Part 2 describes our software development efforts to build an HPC version of our work aimed at scalability on leadership class supercomputers, including a discussion of our strong and weak scaling results to date. Part 3 describes our efforts with software engineering and reproducibilty with a discussion of best practices for working with open source and hosting code, datasets, and analyses.},
}

@INPROCEEDINGS{9202837,
  abbr={IEEE Conference},
  html={http://ecommons.luc.edu/cs_facpubs/249},
  pdf={http://ecommons.luc.edu/cs_facpubs/249},
  author={A. {Chakraborty} and A. {Pawar} and H. {Jang} and S. {Huang} and S. {Mishra} and S. -H. {Chen} and Y. -H. {Chang} and G. K. {Thiruvathukal} and Y.-H. {Lu}},
  booktitle={2020 IEEE 44th Annual Computers, Software, and Applications Conference (COMPSAC)}, title={A Real-Time Feature Indexing System on Live Video Streams},
  year={2020},
  volume={},
  number={},
  pages={42-50},
  abstract={Most of the existing video storage systems rely on offline processing to support the feature-based indexing on video streams. The feature-based indexing technique provides an effective way for users to search video content through visual features, such as object categories (e.g., cars and persons). However, due to the reliance on offline processing, video streams along with their captured features cannot be searchable immediately after video streams are recorded. According to our investigation, buffering and storing live video steams are more time-consuming than the YOLO v3 object detector. Such observation motivates us to propose a real-time feature indexing (RTFI) system to enable instantaneous feature-based indexing on live video streams after video streams are captured and processed through object detectors. RTFI achieves its real-time goal via incorporating the novel design of metadata structure and data placement, the capability of modern object detector (i.e., YOLO v3), and the deduplication techniques to avoid storing repetitive video content. Notably, RTFI is the first system design for realizing real-time feature-based indexing on live video streams. RTFI is implemented on a Linux server and can improve the system throughput by upto 10.60x, compared with the base system without the proposed design. In addition, RTFI is able to make the video content searchable within 20 milliseconds for 10 live video streams after the video content is received by the proposed system, excluding the network transfer latency.},
  keywords={feature extraction;indexing;Linux;meta data;object detection;storage management;video signal processing;video streaming;RTFI;base system;video content search;real-time feature indexing system;offline processing;visual features;video storage systems;real-time feature-based indexing technique;YOLO v3 object detector;live video streams capture;metadata structure;data placement;deduplication techniques;repetitive video content storage;Linux server;network transfer latency;Streaming media;Indexing;Detectors;Feature extraction;Object detection;Real-time systems;Automobiles;object detection;data storage;real-time;feature-bassed indexing},
  doi={10.1109/COMPSAC48688.2020.00016},
  ISSN={0730-3157},
  month={July},
}

@INPROCEEDINGS{GRS-Posters-4,
  abbr={Loyola},
  html={http://ecommons.luc.edu/grs/2020/posters/4},
  pdf={http://ecommons.luc.edu/grs/2020/posters/4},
  author = {Allan Miller and George Thiruvathukal and Konstantin L"{a}ufer and Emmanuel Amobi and Sean Higgins and Linette Maliakal and Emily Meister and Jean-Luc Putter and Alex Rose and Nicholas Synovic and Sophie Von Hatten and Jonathan Warkentin and Martin Zugschwert},
  title = {Toward a containerized pipeline for longitudinal analysis of open-source software projects},
  booktitle = {Graduate Research Symposium 2020},
  abstract={Trust in open-source software is a cornerstone of scientific progress and a foundation of high-quality public services. Just as standards are integral when judging the efficacy of a novel pharmaceutical compound or determining the spread of a new disease, the software used to make those determinations should be useful, error-free, reliable, performant, and secure. A small bug in an application, library, or framework can lead to economic loss and even loss of life. We rely on software developers to be dynamic and responsive to user review and bug-reporting. Our team developed an open-source modular pipeline to perform empirical investigations of software quality. A key innovation of our approach is to look at projects “from a distance” similar to methods used in climate, e.g. satellite images being used to observe environmental impacts in air quality/rain forests. Instead of looking at language-specific source code features, our pipeline uses a language-agnostic high-level approach to track software quality by focusing on the development process itself, which yields great insight into the processes programmers use to write and maintain their software. Our distributed modular approach to analytics allows the pipeline to be easily extended to support additional metrics in future work. We store extracted data in an embedded SQLite database, which means that analysis can proceed without complex server setup, let alone hosting the software on dedicated servers. Our analytical modules are designed for efficiency, and future runs of our software only collect missing data, supporting the incremental analysis of known, important open-source projects.},
  year={2020},
}


@article{ecommons-251,
  abbr={Book Chapter},
  author = {Sara Aghajanzadeh and Andrew T. Jebb and Yifan Li and Yung-Hsiang Lu and George K. Thiruvathukal},
  title = "{Observing Human Behavior Through Worldwide Network Cameras}",
  year = "2020",
  month = "6",
  doi = "10.1037/0000193-006",
  abstract = {This chapter presents an overview of the opportunities from video data available in worldwide network cameras and a research tool, called CAM² (Continuous Analysis of Many CAMeras), for obtaining and analyzing visual data at a large scale. It starts by providing an overview of computer technologies for analyzing human behaviors from video data, followed by a discussion of how various human behaviors are classified and the challenges in creating analysis software. The chapter uses several examples as sources of data (i.e., network cameras) from which it would be possible to observe human behaviors. It then introduces a software infrastructure built at Purdue University, called CAM², as a general-purpose computing platform for retrieving and analyzing visual data from many sources across the globe. Behavioral researchers use video cameras to capture contextual information, human facial and body information, and social interactions.},
  html = {https://ecommons.luc.edu/cs_facpubs/251/}
}

@misc{ghodgaonkar2020observing,
  abbr={Tech Report},
  title={Observing Responses to the COVID-19 Pandemic using Worldwide Network Cameras}, 
  author={Isha Ghodgaonkar and Abhinav Goel and Fischer Bordwell and Caleb Tung and Sara Aghajanzadeh and Noah Curran and Ryan Chen and Kaiwen Yu and Sneha Mahapatra and Vishnu Banna and Gore Kao and Kate Lee and Xiao Hu and Nick Eliopolous and Akhil Chinnakotla and Damini Rijhwani and Ashley Kim and Aditya Chakraborty and Mark Daniel Ward and Yung-Hsiang Lu and George K. Thiruvathukal},
  year={2020},
  eprint={2005.09091},
  archivePrefix={arXiv},
  primaryClass={cs.CY},
  abstract={COVID-19 has resulted in a worldwide pandemic, leading to "lockdown" policies and social distancing. The pandemic has profoundly changed the world. Traditional methods for observing these historical events are difficult because sending reporters to areas with many infected people can put the reporters' lives in danger. New technologies are needed for safely observing responses to these policies. This paper reports using thousands of network cameras deployed worldwide for the purpose of witnessing activities in response to the policies. The network cameras can continuously provide real-time visual data (image and video) without human efforts. Thus, network cameras can be utilized to observe activities without risking the lives of reporters. This paper describes a project that uses network cameras to observe responses to governments' policies during the COVID-19 pandemic (March to April in 2020). The project discovers over 30,000 network cameras deployed in 110 countries. A set of computer tools are created to collect visual data from network cameras continuously during the pandemic. This paper describes the methods to discover network cameras on the Internet, the methods to collect and manage data, and preliminary results of data analysis. This project can be the foundation for observing the possible "second wave" in fall 2020. The data may be used for post-pandemic analysis by sociologists, public health experts, and meteorologists.
},
  html={https://ecommons.luc.edu/cs_facpubs/247/},
  pdf={https://arxiv.org/abs/2005.09091},
}

@misc{FLICYouTube,
  abbr={Video},
  html={https://www.youtube.com/watch?v=avYV1m_1yg8&feature=youtu.be},
  title={FLIC: A Distributed Fog Cache for City-Scale Applications (Presentatiion)},
  author={Jack West and Neil Klingensmith and George K. Thiruvathukal},
  abstract={We present FLIC, a distributed software data caching framework for fogs that reduces network traffic and latency. FLICis targeted toward city-scale deployments of cooperative IoT devices in which each node gathers and shares data with surrounding devices. As machine learning and other data processing techniques that require large volumes of training data are ported to low-cost and low-power IoT systems, we expect that data analysis will be moved away from the cloud. Separation from the cloud will reduce reliance on power-hungry centralized cloud-based infrastructure. However, city-scale deployments of cooperative IoT devices often connect to the Internet with cellular service, in which service charges are proportional to network usage. IoT system architects must be clever in order to keep costs down in these scenarios. To reduce the network bandwidth required to operate city-scale deployments of cooperative IoT systems, FLIC implements a distributed cache on the IoT nodes in the fog. FLIC allows the IoT network to share its data without repetitively interacting with a simple cloud storage service reducing calls out to a backing store. Our results displayed a less than 2% miss rate on reads. Thus, allowing for only 5% of requests needing the backing store. We were also able to achieve more than 50% reduction in bytes transmitted per second.},
  year={2020},
}

@ARTICLE{10.3389/fncir.2020.00012,  
  abbr={Frontiers Journal},
  html={https://ecommons.luc.edu/cs_facpubs/240/},
  pdf={https://www.frontiersin.org/articles/10.3389/fncir.2020.00012/full},
  selected={true},
  AUTHOR={Dematties, Dario and Rizzi, Silvio and Thiruvathukal, George K. and Pérez, Mauricio David and Wainselboim, Alejandro and Zanutto, B. Silvano},
  TITLE={A Computational Theory for the Emergence of Grammatical Categories in Cortical Dynamics},	
  JOURNAL={Frontiers in Neural Circuits},	
  VOLUME={14},
  PAGES={12},
  YEAR={2020},
  URL={https://www.frontiersin.org/article/10.3389/fncir.2020.00012},
  DOI={10.3389/fncir.2020.00012},
  ISSN={1662-5110},
  ABSTRACT={A general agreement in psycholinguistics claims that syntax and meaning are unified precisely and very quickly during online sentence processing. Although several theories have advanced arguments regarding the neurocomputational bases of this phenomenon, we argue that these theories could potentially benefit by including neurophysiological data concerning cortical dynamics constraints in brain tissue. In addition, some theories promote the integration of complex optimization methods in neural tissue. In this paper we attempt to fill these gaps introducing a computational model inspired in the dynamics of cortical tissue. In our modeling approach, proximal afferent dendrites produce stochastic cellular activations, while distal dendritic branches–on the other hand–contribute independently to somatic depolarization by means of dendritic spikes, and finally, prediction failures produce massive firing events preventing formation of sparse distributed representations. The model presented in this paper combines semantic and coarse-grained syntactic constraints for each word in a sentence context until grammatically related word function discrimination emerges spontaneously by the sole correlation of lexical information from different sources without applying complex optimization methods. By means of support vector machine techniques, we show that the sparse activation features returned by our approach are well suited—bootstrapping from the features returned by Word Embedding mechanisms—to accomplish grammatical function classification of individual words in a sentence. In this way we develop a biologically guided computational explanation for linguistically relevant unification processes in cortex which connects psycholinguistics to neurobiological accounts of language. We also claim that the computational hypotheses established in this research could foster future work on biologically-inspired learning algorithms for natural language processing applications.},
}  

@INPROCEEDINGS{9028394,
  abbr={IEEE Conference},
  html={http://ecommons.luc.edu/cs_facpubs/231},
  pdf={http://ecommons.luc.edu/cs_facpubs/231},
  selected={true},
  author={R. I. {Greenberg} and G. K. {Thiruvathukal}},
  booktitle={2019 IEEE Frontiers in Education Conference (FIE)},
  title={Exercises Integrating High School Mathematics with Robot Motion Planning},
  year={2019},
  volume={},
  number={},
  pages={1-5},
  abstract={This Innovative Practice Work in Progress presents progress in developing exercises for high school students incorporating level-appropriate mathematics into robotics activities. We assume mathematical foundations ranging from algebra to precalculus, whereas most prior work on integrating mathematics into robotics uses only very elementary mathematical reasoning or, at the other extreme, is comprised of technical papers or books using calculus and other advanced mathematics. The exercises suggested are relevant to any differential-drive robot, which is an appropriate model for many different varieties of educational robots. They guide students towards comparing a variety of natural navigational strategies making use of typical movement primitives. The exercises align with Common Core State Standards for Mathematics.},
  keywords={computer aided instruction;educational institutions;educational robots;mathematics computing;mobile robots;path planning;differential-drive robot;educational robots;high school mathematics;level-appropriate mathematics;robot motion planning;Wheels;Mobile robots;Navigation;Robot kinematics;Mathematics;Sensors;Robotics;Computer science education;Mathematics of Computing},
  doi={10.1109/FIE43999.2019.9028394},
  ISSN={2377-634X},
  month={Oct},
}

@article{10.1371/journal.pone.0217966,
  abbr={PLOS ONE},
  selected={true},
  author = {Dematties, Dario AND Rizzi, Silvio AND Thiruvathukal, George K. AND Wainselboim, Alejandro AND Zanutto, B. Silvano},
  journal = {PLOS ONE},
  publisher = {Public Library of Science},
  title = {Phonetic acquisition in cortical dynamics, a computational approach},
  year = {2019},
  month = {06},
  volume = {14},
  url = {https://doi.org/10.1371/journal.pone.0217966},
  pages = {1-28},
  abstract = {Many computational theories have been developed to improve artificial phonetic classification performance from linguistic auditory streams. However, less attention has been given to psycholinguistic data and neurophysiological features recently found in cortical tissue. We focus on a context in which basic linguistic units–such as phonemes–are extracted and robustly classified by humans and other animals from complex acoustic streams in speech data. We are especially motivated by the fact that 8-month-old human infants can accomplish segmentation of words from fluent audio streams based exclusively on the statistical relationships between neighboring speech sounds without any kind of supervision. In this paper, we introduce a biologically inspired and fully unsupervised neurocomputational approach that incorporates key neurophysiological and anatomical cortical properties, including columnar organization, spontaneous micro-columnar formation, adaptation to contextual activations and Sparse Distributed Representations (SDRs) produced by means of partial N-Methyl-D-aspartic acid (NMDA) depolarization. Its feature abstraction capabilities show promising phonetic invariance and generalization attributes. Our model improves the performance of a Support Vector Machine (SVM) classifier for monosyllabic, disyllabic and trisyllabic word classification tasks in the presence of environmental disturbances such as white noise, reverberation, and pitch and voice variations. Furthermore, our approach emphasizes potential self-organizing cortical principles achieving improvement without any kind of optimization guidance which could minimize hypothetical loss functions by means of–for example–backpropagation. Thus, our computational model outperforms multiresolution spectro-temporal auditory feature representations using only the statistical sequential structure immerse in the phonotactic rules of the input stream.},
  number = {6},
  html = {https://ecommons.luc.edu/cs_facpubs/229/},
  pdf = {https://journals.plos.org/plosone/article/file?id=10.1371/journal.pone.0217966&type=printable},
  doi = {10.1371/journal.pone.0217966}
}

@inproceedings{10.1145/3337932.3338814,
  author = {L"{a}ufer, Konstantin and O'Sullivan, John and Thiruvathukal, George K.},
  title = {Tests as Maintainable Assets via Auto-Generated Spies: A Case Study Involving the Scala Collections Library's Iterator Trait},
  year = {2019},
  isbn = {9781450368247},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/3337932.3338814},
  doi = {10.1145/3337932.3338814},
  abstract = {In testing stateful abstractions, it is often necessary to record interactions, such as method invocations, and express assertions over these interactions. Following the Test Spy design pattern, we can reify such interactions programmatically through additional mutable state. Alternatively, a mocking framework, such as Mockito, can automatically generate test spies that allow us to record the interactions and express our expectations in a declarative domain-specific language. According to our study of the test code for Scala's Iterator trait, the latter approach can lead to a significant reduction of test code complexity in terms of metrics such as code size (in some cases over 70% smaller), cyclomatic complexity, and amount of additional mutable state required. In this tools paper, we argue that the resulting test code is not only more maintainable, readable, and intentional, but also a better stylistic match for the Scala community than manually implemented, explicitly stateful test spies.},
  booktitle = {Proceedings of the Tenth ACM SIGPLAN Symposium on Scala},
  pages = {17–21},
  numpages = {5},
  keywords = {automated unit testing, test code metrics, stream processing, spy-based testing, mock-based testing, prefix sum, iterator design pattern, test code complexity},
  location = {London, United Kingdom},
  series = {Scala '19},
  html={http://ecommons.luc.edu/cs_facpubs/230}
}

http://ecommons.luc.edu/cs_facpubs/219

@misc{thiruvathukal2019benchmarking,
  abbr={ArXiv},
  html={https://ecommons.luc.edu/cs_facpubs/219/},
  pdf={https://ecommons.luc.edu/cs_facpubs/219/},
  title={A Benchmarking Study to Evaluate Apache Spark on Large-Scale Supercomputers}, 
  author={George K. Thiruvathukal and Cameron Christensen and Xiaoyong Jin and François Tessier and Venkatram Vishwanath},
  year={2019},
  eprint={1904.11812},
  archivePrefix={arXiv},
  primaryClass={cs.DC}
}

http://ecommons.luc.edu/cs_facpubs/214


@inproceedings{EistyCarverThiruvathukalEASE,
  abbr            = {Conference},
  html            = {http://ecommons.luc.edu/cs_facpubs/214},
  pdf             = {http://ecommons.luc.edu/cs_facpubs/214},
  author          = {Nasir U. Eisty and George K. Thiruvathukal and Jeffrey C. Carver},
  title           = {Use of Software Process in Research Software Development: A Survey},
  booktitle       = {Proceedings of the Evaluation and Assessment on Software Engineering 2019},
  editor          = {EASE},
  year            = {2019},
  doi             = {10.1145/3319008.3319351},
  abstract        = {Background: Developers face challenges in building high-quality research software due to its inherent complexity. These challenges can reduce the confidence users have in the quality of the result produced by the software. Use of a defined software development process, which divides the development into distinct phases, results in improved design, more trustworthy results, and better project management. Aims: This paper focuses on gaining a better understanding of the use of software development process for research software. Method: We surveyed research software developers to collect information about their use of software development processes. We analyze whether and demographic factors influence the respondents' use of and perceived value in defined process. Results: Based on 98 responses, research software developers appear to follow a defined software development process at least some of the time. The respondents also have a strong positive perception about the value of following processes. Conclusions: To produce high-quality and reliable research software, which is critical for many research domains, research software developers must follow a proper software development process. The results indicate a positive perception of value about using defined development processes that should lead to both short-term benefits through improved results and long-term benefits through more maintainable software.},
}


http://ecommons.luc.edu/cs_facpubs/216

@misc{barba_bazán_brown_guimera_gymrek_hanna_heagy_huff_katz_madan_et al_2019,
  abbr={Tech Report},
  html={http://ecommons.luc.edu/cs_facpubs/216},
  pdf={http://ecommons.luc.edu/cs_facpubs/216},
  title={Giving software its due through community-driven review and publication},
  url={osf.io/f4vx6},
  DOI={10.31219/osf.io/f4vx6},
  publisher={OSF Preprints},
  author={Barba, Lorena A and Bazán, Juanjo and Brown, Jed and Guimera, Roman V and Gymrek, Melissa and Hanna, Alex and Heagy, Lindsey J and Huff, Kathryn D and Katz, Daniel S and Madan, Christopher R and et al.},
  year={2019},
  month={Apr},
}

http://ecommons.luc.edu/cs_facpubs/213

@inproceedings{key,
  abbr={Conference},
  html={http://ecommons.luc.edu/cs_facpubs/213},
  pdf={http://ecommons.luc.edu/cs_facpubs/213},
  author          = {Ronald I. Greenberg, George K. Thiruvathukal, and Sara T. Greenberg},
  title           = {Integrating mathematics and educational robotics: Simple motion planning},
  booktitle       = {10th International Conference on Robotics in Education (RiE)},
  editor          = {Springer Verlag},
  year            = {2019}
}

@INPROCEEDINGS{8695375,
  abbr={IEEE Conference},
  html={http://ecommons.luc.edu/cs_facpubs/207},
  pdf={http://ecommons.luc.edu/cs_facpubs/207},
  author={C. {Tung} and M. R. {Kelleher} and R. J. {Schlueter} and B. {Xu} and Y. {Lu} and G. K. {Thiruvathukal} and Y. {Chen} and Y. {Lu}},
  booktitle={2019 IEEE Conference on Multimedia Information Processing and Retrieval (MIPR)}, title={Large-Scale Object Detection of Images from Network Cameras in Variable Ambient Lighting Conditions},
  year={2019},
  volume={},
  number={},
  pages={393-398},
  abstract={Computer vision relies on labeled datasets for training and evaluation in detecting and recognizing objects. The popular computer vision program, YOLO ("You Only Look Once"), has been shown to accurately detect objects in many major image datasets. However, the images found in those datasets, are independent of one another and cannot be used to test YOLO's consistency at detecting the same object as its environment (e.g. ambient lighting) changes. This paper describes a novel effort to evaluate YOLO's consistency for large-scale applications. It does so by working (a) at large scale and (b) by using consecutive images from a curated network of public video cameras deployed in a variety of real-world situations, including traf?c intersections, national parks, shopping malls, university campuses, etc. We speci?cally examine YOLO's ability to detect objects in different scenarios (e.g., daytime vs. night), leveraging the cameras' ability to rapidly retrieve many successive images for evaluating detection consistency. Using our camera network and advanced computing resources (supercomputers), we analyzedmorethan5millionimagescapturedby140network cameras in 24 hours. Compared with labels marked by humans (considered as "ground truth"), YOLO struggles to consistently detect the same humans and cars as their positions change from one frame to the next; it also struggles to detect objects at night time. Our ?ndings suggest that state-of-the art vision solutions should be trained by data from network camera with contextual information before they can be deployed in applications that demand high consistency on object detection.},
  keywords={cameras;computer vision;lighting;object detection;video cameras;curated network;public video cameras;YOLO's ability;successive images;detection consistency;camera network;advanced computing resources;labels;state-of-the art vision solutions;network camera;variable ambient lighting conditions;labeled datasets;training;image datasets;large-scale applications;consecutive images;high consistency;large-scale object detection;objects recognition;computer vision program;YOLO consistency;You Only Look Once;time 24.0 hour;Cameras;Object detection;Lighting;Streaming media;Automobiles;Computer vision;Detectors;Computer Vision;Object Recognition;Network Cameras;Object Detection},
  doi={10.1109/MIPR.2019.00080},
  ISSN={},
  month={March},
}

@software{dematties_dario_2019_2584864,
  abbr={Data Set},
  html={http://ecommons.luc.edu/cs_facpubs/210},
  abstract={The human brain is the most complex object created by evolution in the known universe. Yet, how much of this complexity is devoted to exclusively carrying out its algorithmic capabilities and how much of it has been inherited from biological paths of evolution in order to work properly in its physical environment? What if the information processing properties of the brain could be reduced to a few simple columnar rules replicated throughout the neocortex? In our research project we seek for those principles by means of the elaboration of computational models of the neocortex.

},
  author       = {Dematties, Dario and
                  Thiruvathukal, George K. and
                  Rizzi, Silvio and
                  Wainselboim, Alejandro Javier and
                  Zanutto, Bonifacio Silvano},
  title        = {{neurophon/neurophon: Minor update to ensure future 
                   updates include Zenodo author/keyword metadata}},
  month        = mar,
  year         = 2019,
  publisher    = {Zenodo},
  version      = {v1.0.1},
  doi          = {10.5281/zenodo.2584864},
  url          = {https://doi.org/10.5281/zenodo.2584864}
}

@dataset{dematties_dario_2019_2581550,
  abbr={Data Set},
  html={http://ecommons.luc.edu/cs_facpubs/211},
  abstract={This repository holds three files: File S1 Data. Cortical Spectro-Temporal Model (CSTM) experimental results data. It contains a spreadsheet including all the numerical results returned by the experiments as well as the complete Statistical Significance tests conducted in this work. File S2 Data. CSTM complementary experimental results data. It contains a spreadsheet that includes all the numerical results returned by a complementary set of experiments. File S1 Appendix. Computational Setup and Complementary Experiments. An appendix including the Computational Setup of our CSTM, which describes its object oriented inheritance structure as well as the parallelization strategy used for its implementation in High Performance Computing (HPC) resources. We also include Strong and Weak scaling tests of our implementation on HPC resources. An appendix including a battery of complementary experiments showing the classification accuracy levels of different instances of the EL in the CSTM.},

  author       = {Dematties, Dario and
                  Thiruvathukal, George K. and
                  Rizzi, Silvio and
                  Wainselboim, Alejandro Javier and
                  Zanutto, Bonifacio Silvano},
  title        = {{Experimental Results and Appendices: Cortical 
                   Spectro-Temporal Model (CSTM).}},
  month        = mar,
  year         = 2019,
  publisher    = {Zenodo},
  doi          = {10.5281/zenodo.2581550},
  url          = {https://doi.org/10.5281/zenodo.2581550}
}

@dataset{dematties_dario_2019_2576130,
  abbr = {Data Set},
  html = {http://ecommons.luc.edu/cs_facpubs/212},

  author       = {Dematties, Dario and
                  Thiruvathukal, George K. and
                  Rizzi, Silvio and
                  Wainselboim, Alejandro Javier and
                  Zanutto, Bonifacio Silvano},
  title        = {{Datasets used to train and test the Cortical 
                   Spectro-Temporal Model (CSTM).}},
  month        = feb,
  year         = 2019,
  publisher    = {Zenodo},
  version      = {v1.0},
  doi          = {10.5281/zenodo.2576130},
  url          = {https://doi.org/10.5281/zenodo.2576130}
}

@article{Smith2019,
  abbr={Poster},
  html={http://ecommons.luc.edu/cs_facpubs/218},
  pdf={https://figshare.com/articles/SIAM_CSE_2019_Minisymposterium_The_Journal_of_Open_Source_Software/7763171},
  abstrct = {This poster describes the progress of the Journal of Open Source Software (JOSS), a free, open-access journal designed to publish brief papers about research software. The primary purpose of JOSS is to enable developers of research software to receive citation credit equivalent to typical archival publications. JOSS papers are deliberately short and required to include a summary describing the purpose and high-level functionality of the software (written for a diverse, non-specialist audience), a statement of need, authors and their affiliations, and key references, as well as link to an archived version of the software (e.g., DOI obtained from Zenodo). Upon acceptance, papers receive a CrossRef DOI. Rather than a review of a lengthy software paper (including, e.g., methodology, validation, sample results), JOSS submissions undergo rigorous peer review of the article and software, including documentation, tests, continuous integration, and licensing. The JOSS review process is modeled on the established approach of the rOpenSci collaboration. The entire submission and review process occurs openly on GitHub; papers not yet accepted remain visible and under review until the authors make appropriate changes for acceptance—unlike other journals, papers requiring major revision are not rejected. JOSS was founded in May 2016, and in its first year published 111 articles in a variety of fields. Since then, JOSS has published over 494 articles (as of 23 Feb 2019), and submissions continue to grow.},
  author = "Arfon Smith and Lorena A. Barba and Daniel S. Katz and Kyle Niemeyer and Tania Allard and Juanjo Bazan and Jed Brown and Jason Clark and Roman Valls Guimera and Melissa Gymrek and Lindsey Heagy and Kathryn Huff and George K. Thiruvathukal and Christopher Madan and Kevin Moerman and Lorena Pantano and Viviane Pons and Jack Poulson and Pjotr Prins and Karthik Ram and Elizabeth Ramirez and Ariel Rokem and Kristen Thyng and Yo Yehudi",
  title = "{SIAM CSE 2019 Minisymposterium: The Journal of Open Source Software}",
  year = "2019",
  month = "2",
  url = "https://figshare.com/articles/poster/SIAM_CSE_2019_Minisymposterium_The_Journal_of_Open_Source_Software/7763171",
  doi = "10.6084/m9.figshare.7763171.v1"
}


@ARTICLE{8594612,
  abbr={IEEE Magazine},
  html={http://ecommons.luc.edu/cs_facpubs/208},
  pdf={http://ecommons.luc.edu/cs_facpubs/208},
  author={Z. {Kapach} and A. {Ulmer} and D. {Merrick} and A. {Alikhan} and Y. {Lu} and A. {Mohan} and A. S. {Kaseb} and G. K. {Thiruvathukal}},
  journal={IEEE MultiMedia}, title={Cloud Resource Optimization for Processing Multiple Streams of Visual Data},
  year={2019},
  volume={26},
  number={3},
  pages={31-41},
  abstract={Hundreds of millions of network cameras have been installed throughout the world. Each is capable of providing a vast amount of real-time data. Analyzing the massive data generated by these cameras requires significant computational resources and the demands may vary over time. Cloud computing shows the most promise to provide the needed resources on demand. In this paper, we investigate how to allocate cloud resources when analyzing real-time data streams from network cameras. A resource manager considers many factors that affect its decisions, including the types of analysis, the number of data streams, and the locations of the cameras. The manager then selects the most cost-efficient types of cloud instances (e.g., central processing unit versus general-purpose graphics processing units) to meet the computational demands for analyzing streams. We evaluate the effectiveness of our approach using Amazon Web Services. Experiments demonstrate more than 50% cost reduction for real workloads.},
  keywords={cloud computing;data visualisation;optimisation;resource allocation;Web services;cloud resource optimization;visual data;network cameras;cloud computing;resource manager;cost-efficient types;cloud instances;computational demands;computational resources;real-time data streams;Amazon Web services;multiple streams processing;Cloud computing;Cameras;Streaming media;Graphics processing units;Real-time systems;Central Processing Unit;Visualization},
  doi={10.1109/MMUL.2018.2890255},
  ISSN={1941-0166},
  month={July},
}

@ARTICLE{8848161,
  abbr={IEEE Magazine},
  html={http://ecommons.luc.edu/cs_facpubs/215},
  pdf={http://ecommons.luc.edu/cs_facpubs/215},
  author={Y. {Lu} and G. K. {Thiruvathukal} and A. S. {Kaseb} and K. {Gauen} and D. {Rijhwani} and R. {Dailey} and D. {Malik} and Y. {Huang} and S. {Aghajanzadeh} and M. M. {Guo}},
  journal={Computer}, title={See the World Through Network Cameras},
  year={2019},
  volume={52},
  number={10},
  pages={30-40},
  abstract={Millions of network cameras have been deployed worldwide. Real-time data from many network cameras can offer instant views of multiple locations for many applications. We describe the real-time data available from these cameras and potential applications.},
  keywords={cameras;network cameras;Cameras;IP networks;Urban areas;Real-time systems;Streaming media;Internet;Visualization},
  doi={10.1109/MC.2019.2906841},
  ISSN={1558-0814},
  month={Oct},
}

@article{Brophy_Matthews_Thiruvathukal_2019, 
  abbr={Journal SAJS}, 
  html={http://ecommons.luc.edu/cs_facpubs/233},
  pdf={http://ecommons.luc.edu/cs_facpubs/233},
  title={An analysis of the effect of tooth wear on bovid identification},
  volume={115},
  url={https://www.sajs.co.za/article/view/5496},
  doi={10.17159/sajs.2019/5496}, 
  abstract={Previous research provides a method for reducing the subjectivity in molar tooth identification of animals in the family Bovidae, by quantifying the occlusal surface of teeth using elliptical Fourier analysis. This current paper specifically tests what effect teeth with medium to late wear have on the identification of bovid teeth when using the form (size and shape) of the occlusal surface to classify specimens.},
  journal={South African Journal of Science}, 
  author={Brophy, Juliet K. and Matthews, Gregory J. and Thiruvathukal, George K.},
  year={2019},
  month={Jul.}
}


@ARTICLE{8693826,
  abbr={IEEE Conference},
  html={http://ecommons.luc.edu/cs_facpubs/217},
  pdf={http://ecommons.luc.edu/cs_facpubs/217},
  author={S. {Alyamkin} and M. {Ardi} and A. C. {Berg} and A. {Brighton} and B. {Chen} and Y. {Chen} and H. {Cheng} and Z. {Fan} and C. {Feng} and B. {Fu} and K. {Gauen} and A. {Goel} and A. {Goncharenko} and X. {Guo} and S. {Ha} and A. {Howard} and X. {Hu} and Y. {Huang} and D. {Kang} and J. {Kim} and J. G. {Ko} and A. {Kondratyev} and J. {Lee} and S. {Lee} and S. {Lee} and Z. {Li} and Z. {Liang} and J. {Liu} and X. {Liu} and Y. {Lu} and Y. {Lu} and D. {Malik} and H. H. {Nguyen} and E. {Park} and D. {Repin} and L. {Shen} and T. {Sheng} and F. {Sun} and D. {Svitov} and G. K. {Thiruvathukal} and B. {Zhang} and J. {Zhang} and X. {Zhang} and S. {Zhuo}},
  journal={IEEE Journal on Emerging and Selected Topics in Circuits and Systems}, title={Low-Power Computer Vision: Status, Challenges, and Opportunities},
  year={2019},
  volume={9},
  number={2},
  pages={411-421},
  abstract={Computer vision has achieved impressive progress in recent years. Meanwhile, mobile phones have become the primary computing platforms for millions of people. In addition to mobile phones, many autonomous systems rely on visual data for making decisions, and some of these systems have limited energy (such as unmanned aerial vehicles also called drones and mobile robots). These systems rely on batteries, and energy efficiency is critical. This paper serves the following two main purposes. First, examine the state of the art for low-power solutions to detect objects in images. Since 2015, the IEEE Annual International Low-Power Image Recognition Challenge (LPIRC) has been held to identify the most energy-efficient computer vision solutions. This paper summarizes the 2018 winners' solutions. Second, suggest directions for research as well as opportunities for low-power computer vision.},
  keywords={computer vision;object detection;visual data;decision making;batteries;object detection;energy-efficient computer vision solutions;low-power solutions;energy efficiency;unmanned aerial vehicles;autonomous systems;primary computing platforms;mobile phones;low-power computer vision;Computer vision;Image recognition;Hardware;Mobile handsets;Software;Computer architecture;Benchmark testing;Computer vision;low-power electronics;object detection;machine intelligence},
  doi={10.1109/JETCAS.2019.2911899},
  ISSN={2156-3365},
  month={June},
}


@inproceedings{ParCo2019,
  abbr            = {Conference},
  author          = {Dario Dematties and George K. Thiruvathukal and Silvio Rizzi and Alejandro Wainselboim and B. Silvano Zanutto},
  title           = {Towards High-End Scalability on Biologically-Inspired Computational ModelsAuthors},
  booktitle       = {Parallel Computing: Technology Trends},
  pages           = {497-506},
  editor          = {Ian Foster and Gerhard R. Joubert and Luděk Kučera and Wolfgang E. Nagel and Frans Peter},
  year            = {2020},
  html            = {https://ecommons.luc.edu/cs_facpubs/242/},
  abstract         = {The interdisciplinary field of neuroscience has made significantprogress in recent decades, providing the scientific community in gen-eral with a new level of understanding on how the brain works beyondthe  store-and-fire  model  found  in  traditional  neural  networks.  Mean-while,  Machine  Learning  (ML)  based  on  established  models  has  seena  surge  of  interest  in  the  High  Performance  Computing  (HPC)  com-munity,  especially  through  the  use  of  high-end  accelerators,  such  asGraphical  Processing  Units  (GPUs),  including  HPC  clusters  of  same.In our work, we are motivated to exploit these high-performance com-puting  developments  and  understand  the  scaling  challenges  for  new–biologically inspired–learning models on leadership-class HPC resources.These  emerging  models  feature  sparse  and  random  connectivity  pro-files  that  map  to  more  loosely-coupled  parallel  architectures  with  alarge number of CPU cores per node. Contrasted with traditional MLcodes, these methods exploit loosely-coupled sparse data structures asopposed  to  tightly-coupled  dense  matrix  computations,  which  benefitfrom SIMD-style parallelism found on GPUs. In this paper we introducea hybrid Message Passing Interface (MPI) and Open Multi-Processing(OpenMP) parallelization scheme to accelerate and scale our computa-tional model based on the dynamics of cortical tissue. We ran compu-tational tests on a leadership class visualization and analysis cluster atArgonne National Laboratory. We include a study of strong and weakscaling, where we obtained parallel efficiency measures with a minimumabove 87% and a maximum above 97% for simulations of our biologicallyinspired neural network on up to 64 computing nodes running 8 threadseach. This study shows promise of the MPI+OpenMP hybrid approachto support flexible and biologically-inspired computational experimen-tal scenarios. In addition, we present the viability in the application ofthese strategies in high-end leadership computers in the future.}
}


@misc{west2020voltkey,
  abbr={Tech Report},
  title={VoltKey: Using Power Line Noise for Zero-Involvement Pairing and Authentication (Demo Abstract)}, 
  author={Jack West and Tien VoNguyen and Isaac Ahlgren and Iryna Motyashok and George K. Thiruvathukal and Neil Klingensmith},
  year={2020},
  eprint={2004.00092},
  archivePrefix={arXiv},
  primaryClass={eess.SP},
  html={https://ecommons.luc.edu/cs_facpubs/245/},
  pdf={https://arxiv.org/abs/2004.00092}
}

@INPROCEEDINGS{9221198,
  abbr={IEEE Conference},
  selected={true},
  author={A. {Goel} and C. {Tung} and Y. -H. {Lu} and G. K. {Thiruvathukal}},
  booktitle={2020 IEEE 6th World Forum on Internet of Things (WF-IoT)}, title={A Survey of Methods for Low-Power Deep Learning and Computer Vision},
  year={2020},
  volume={},
  number={},
  pages={1-6},
  abstract={Deep neural networks (DNNs) are successful in many computer vision tasks. However, the most accurate DNNs require millions of parameters and operations, making them energy, computation and memory intensive. This impedes the deployment of large DNNs in low-power devices with limited compute resources. Recent research improves DNN models by reducing the memory requirement, energy consumption, and number of operations without significantly decreasing the accuracy. This paper surveys the progress of low-power deep learning and computer vision, specifically in regards to inference, and discusses the methods for compacting and accelerating DNN models. The techniques can be divided into four major categories: (1) parameter quantization and pruning, (2) compressed convolutional filters and matrix factorization, (3) network architecture search, and (4) knowledge distillation. We analyze the accuracy, advantages, disadvantages, and potential solutions to the problems with the techniques in each category. We also discuss new evaluation metrics as a guideline for future research.},
  keywords={computer vision;learning (artificial intelligence);matrix decomposition;neural nets;knowledge distillation;network architecture search;matrix factorization;compressed convolutional filters;parameter quantization and pruning;computer vision tasks;deep neural networks;DNN models;low-power deep learning;energy consumption;memory requirement;low-power devices;neural networks;computer vision;low-power},
  doi={10.1109/WF-IoT48130.2020.9221198},
  ISSN={},
  html={http://ecommons.luc.edu/cs_facpubs/241},
  month={June},
}


@inproceedings{10.1145/3366423.3380063,
  abbr={IEEE Conference},
  selected={true},
  author = {Hu, Xiao and Wang, Haobo and Vegesana, Anirudh and Dube, Somesh and Yu, Kaiwen and Kao, Gore and Chen, Shuo-Han and Lu, Yung-Hsiang and Thiruvathukal, George K. and Yin, Ming},
  title = {Crowdsourcing Detection of Sampling Biases in Image Datasets},
  year = {2020},
  isbn = {9781450370233},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/3366423.3380063},
  doi = {10.1145/3366423.3380063},
  abstract = {Despite many exciting innovations in computer vision, recent studies reveal a number of risks in existing computer vision systems, suggesting results of such systems may be unfair and untrustworthy. Many of these risks can be partly attributed to the use of a training image dataset that exhibits sampling biases and thus does not accurately reflect the real visual world. Being able to detect potential sampling biases in the visual dataset prior to model development is thus essential for mitigating the fairness and trustworthy concerns in computer vision. In this paper, we propose a three-step crowdsourcing workflow to get humans into the loop for facilitating bias discovery in image datasets. Through two sets of evaluation studies, we find that the proposed workflow can effectively organize the crowd to detect sampling biases in both datasets that are artificially created with designed biases and real-world image datasets that are widely used in computer vision research and system development.},
  booktitle = {Proceedings of The Web Conference 2020},
  pages = {2955–2961},
  numpages = {7},
  keywords = {workflow design, image dataset, sampling bias, crowdsourcing},
  location = {Taipei, Taiwan},
  series = {WWW '20},
  html = {http://ecommons.luc.edu/cs_facpubs/244},
}

@INPROCEEDINGS{9103479,
  abbr={IEEE Conference},
  selected={true},
  author={J. {West} and N. {Klingensmith} and G. {Thiruvathukal}},
  booktitle={2020 IEEE International Conference on Fog Computing (ICFC)}, title={FLIC: A Distributed Fog Cache for City-Scale Applications},
  year={2020},
  volume={},
  number={},
  pages={73-78},
  abstract={We present FLIC, a distributed software data caching framework for fogs that reduces network traffic and latency. FLIC is targeted toward city-scale deployments of cooperative IoT devices in which each node gathers and shares data with surrounding devices. As machine learning and other data processing techniques that require large volumes of training data are ported to low-cost and low-power IoT systems, we expect that data analysis will be moved away from the cloud. Separation from the cloud will reduce reliance on power-hungry centralized cloud-based infrastructure. However, city-scale deployments of cooperative IoT devices often connect to the Internet with cellular service, in which service charges are proportional to network usage. IoT system architects must be clever in order to keep costs down in these scenarios. To reduce the network bandwidth required to operate city-scale deployments of cooperative IoT systems, FLIC implements a distributed cache on the IoT nodes in the fog. FLIC allows the IoT network to share its data without repetitively interacting with a simple cloud storage service, reducing calls out to a backing store. Our results displayed a less than 2% miss rate on reads. Thus, allowing for only 5% of requests needing the backing store. We were also able to achieve more than 50% reduction in bytes transmitted per second.},
  keywords={cache storage;cellular radio;cloud computing;cooperative communication;data analysis;Internet of Things;learning (artificial intelligence);telecommunication power management;telecommunication traffic;data analysis;power-hungry centralized cloud-based infrastructure;low-power IoT systems;FLIC;IoT network;cloud storage service;distributed fog cache;city-scale applications;distributed software data caching framework;network traffic;cooperative IoT devices;machine learning;Coherence;Distributed databases;Cloud computing;Software;Bandwidth;Computer architecture;Containers},
  doi={10.1109/ICFC49376.2020.00019},
  ISSN={},
  html={http://ecommons.luc.edu/cs_facpubs/243},
  month={April},
}


@INPROCEEDINGS{8588655,
  abbr={IEEE Conference},
  author={N. U. {Eisty} and G. K. {Thiruvathukal} and J. C. {Carver}},
  booktitle={2018 IEEE 14th International Conference on e-Science (e-Science)}, title={A Survey of Software Metric Use in Research Software Development},
  year={2018},
  volume={},
  number={},
  pages={212-222},
  abstract={Background: Breakthroughs in research increasingly depend on complex software libraries, tools, and applications aimed at supporting specific science, engineering, business, or humanities disciplines. The complexity and criticality of this software motivate the need for ensuring quality and reliability. Software metrics are a key tool for assessing, measuring, and understanding software quality and reliability. Aims: The goal of this work is to better understand how research software developers use traditional software engineering concepts, like metrics, to support and evaluate both the software and the software development process. One key aspect of this goal is to identify how the set of metrics relevant to research software corresponds to the metrics commonly used in traditional software engineering. Method: We surveyed research software developers to gather information about their knowledge and use of code metrics and software process metrics. We also analyzed the influence of demographics (project size, development role, and development stage) on these metrics. Results: The survey results, from 129 respondents, indicate that respondents have a general knowledge of metrics. However, their knowledge of specific SE metrics is lacking, their use even more limited. The most used metrics relate to performance and testing. Even though code complexity often poses a significant challenge to research software development, respondents did not indicate much use of code metrics. Conclusions: Research software developers appear to be interested and see some value in software metrics but may be encountering roadblocks when trying to use them. Further study is needed to determine the extent to which these metrics could provide value in continuous process improvement.},
  keywords={software development management;software libraries;software metrics;software quality;software reliability;research software developers;code metrics;software process metrics;research software development;software metrics;complex software libraries;reliability;software development process;software quality;software engineering concepts;SE metrics;Software;Complexity theory;Software metrics;Tools;Software engineering;Survey, Software Metrics, Software Engineering, Research Software},
  doi={10.1109/eScience.2018.00036},
  ISSN={},
  month={Oct},
}


@INPROCEEDINGS{8574200,
  abbr={IEEE Conference},
  author={C. {Surakitbanharn} and C. {Yau} and G. {Wang} and A. {Chawla} and Y. {Pan} and Z. {Sun} and S. {Yellin} and D. {Ebert} and Y. {Lu} and G. K. {Thiruvathukal}},
  booktitle={2018 IEEE International Symposium on Technologies for Homeland Security (HST)}, title={Cross-referencing social media and public surveillance camera data for disaster response},
  year={2018},
  volume={},
  number={},
  pages={1-9},
  abstract={Physical media (like surveillance cameras) and social media (like Instagram and Twitter) may both be useful in attaining on-the-ground information during an emergency or disaster situation. However, the intersection and reliability of both surveillance cameras and social media during a natural disaster are not fully understood. To address this gap, we tested whether social media is of utility when physical surveillance cameras went off-line during Hurricane Irma in 2017. Specifically, we collected and compared geo-tagged Instagram and Twitter posts in the state of Florida during times and in areas where public surveillance cameras went off-line. We report social media content and frequency and content to determine the utility for emergency managers or first responders during a natural disaster.},
  keywords={cameras;disasters;emergency management;social networking (online);social media content;natural disaster;public surveillance camera data;Instagram;Twitter;emergency management;Cameras;Hurricanes;Twitter;Surveillance;Videos;Media},
  doi={10.1109/THS.2018.8574200},
  ISSN={},
  month={Oct},
}


@INPROCEEDINGS{8396976,
  abbr={IEEE Conference},
author={A. S. {Kaseb} and B. {Fu} and A. {Mohan} and Y. {Lu} and A. {Reibman} and G. K. {Thiruvathukal}},
booktitle={2018 IEEE Conference on Multimedia Information Processing and Retrieval (MIPR)}, title={Analyzing Real-Time Multimedia Content from Network Cameras Using CPUs and GPUs in the Cloud},
year={2018},
volume={},
number={},
pages={69-74},
abstract={Millions of network cameras are streaming real-time multimedia content (images or videos) for various environments (e.g., highways and malls) and can be used for a variety of applications. Analyzing the content from many network cameras requires significant amounts of computing resources. Cloud vendors offer resources in the form of cloud instances with different capabilities and hourly costs. Some instances include GPUs that can accelerate analysis programs. Doing so incurs additional monetary cost because instances with GPUs are more expensive. It is a challenging problem to reduce the overall monetary cost of using the cloud to analyze the real-time multimedia content from network cameras while meeting the desired analysis frame rates. This paper describes a cloud resource manager that solves this problem by estimating the resource requirements of executing analysis programs using CPU or GPU, formulating the resource allocation problem as a multiple-choice vector bin packing problem, and solving it using an existing algorithm. The experiments show that the manager can reduce up to 61% of the cost compared with other allocation strategies.},
keywords={bin packing;cloud computing;data analysis;graphics processing units;microprocessor chips;multimedia computing;resource allocation;resource allocation problem;network cameras;computing resources;cloud vendors;cloud resource manager;multimedia content;GPU;CPU;vector bin packing problem;Graphics processing units;Cameras;Resource management;Cloud computing;Real-time systems;Multimedia communication;Streaming media;Resource Allocation;Cloud Computing;Computer Vision;GPGPU;Network Cameras},
doi={10.1109/MIPR.2018.00020},
ISSN={},
month={April},}


@INPROCEEDINGS{8102956,
  abbr={IEEE Conference},
author={K. {Gauen} and R. {Dailey} and J. {Laiman} and Y. {Zi} and N. {Asokan} and Y. {Lu} and G. K. {Thiruvathukal} and M. {Shyu} and S. {Chen}},
booktitle={2017 IEEE International Conference on Information Reuse and Integration (IRI)}, title={Comparison of Visual Datasets for Machine Learning},
year={2017},
volume={},
number={},
pages={346-355},
abstract={One of the greatest technological improvements in recent years is the rapid progress using machine learning for processing visual data. Among all factors that contribute to this development, datasets with labels play crucial roles. Several datasets are widely reused for investigating and analyzing different solutions in machine learning. Many systems, such as autonomous vehicles, rely on components using machine learning for recognizing objects. This paper compares different visual datasets and frameworks for machine learning. The comparison is both qualitative and quantitative and investigates object detection labels with respect to size, location, and contextual information. This paper also presents a new approach creating datasets using real-time, geo-tagged visual data, greatly improving the contextual information of the data. The data could be automatically labeled by cross-referencing information from other sources (such as weather).},
keywords={learning (artificial intelligence);object detection;object recognition;machine learning;cross-referencing information;real-time geo-tagged visual data;contextual information;object recognition;object detection;visual data processing;visual datasets;Cameras;Visualization;Sun;Object detection;IP networks;Real-time systems;Videos;network cameras;visual data;image processing;object detection;datasets;CAM2;Pascal VOC;ImageNet;COCO;SUN;Caltech Pedestrian Dataset;INRIA;KITTI;automatic labeling},
doi={10.1109/IRI.2017.59},
ISSN={},
month={Aug},}


@INPROCEEDINGS{7185052,
  abbr={IEEE Conference},
author={W. L. {Honig} and K. {Läufer} and G. K. {Thiruvathukal}},
booktitle={10th IEEE International Symposium on Industrial Embedded Systems (SIES)}, title={A framework architecture for student learning in distributed embedded systems},
year={2015},
volume={},
number={},
pages={1-4},
abstract={Academic courses focused on individual microcomputers or client/server applications are no longer sufficient for students to develop knowledge in embedded systems. Current and near-term industrial systems employ multiple interacting components and new network and security approaches; hence, academic preparation requires teaching students to develop realistic projects comparable to these real-world products. However, the complexity, breadth, and technical variations of these real-world products are difficult to reproduce in the classroom. This paper outlines preliminary work on a framework architecture suitable for academic teaching of modern embedded systems including the Internet of Things. It defines four layers, two of which are at the edges of the network, and not adequately covered in academia. For each layer of the architecture, specific technology and suitable devices are identified. Desired academic outcomes for courses using projects based on the architecture are identified. Feedback and comparison is sought on how effective student course and research activities based on the framework will be to real-world embedded systems developers.},
keywords={computer science education;educational courses;embedded systems;Internet of Things;security of data;teaching;framework architecture;student learning;distributed embedded systems;academic courses;individual microcomputers;client-server applications;industrial systems;security approaches;academic preparation;student teaching;academic teaching;modern embedded systems;Internet of Things;Computer architecture;Embedded systems;Internet;Hardware;Taxonomy;Sensors;embedded systems education;distributed architecture;personal area networks;wearable devices;Internet of Things;Bloom's Taxonomy},
doi={10.1109/SIES.2015.7185052},
ISSN={2150-3117},
month={June},}




@INPROCEEDINGS{6220733,
  abbr={IEEE Conference},
author={J. P. {Kaylor} and K. {Läufer} and G. K. {Thiruvathukal}},
booktitle={2012 IEEE International Conference on Electro/Information Technology}, title={Simplifying domain modeling and memory management in user-mode filesystems with the NOFS framework},
year={2012},
volume={},
number={},
pages={1-6},
abstract={Transparent access to remote data sets and data arising from web services is a non-trivial challenge to application developers. This early stage work addresses this challenge with NOFS, an object-oriented framework for creating filesystems to support domain specific functionality. While an early stage work, we present a solution to solve the access problem. Our solution greatly simplifies the task of filesystems development by providing the glue code needed between a domain model and the filesystem contract. We demonstrate support for domain models that are larger than physical memory and demonstrate how the concerns of caching can be removed from user-mode filesystem implementations. Future work will addresses more robust solutions to caching and other performance strategies.},
keywords={cache storage;contracts;object-oriented methods;Web services;domain modeling;memory management;user-mode filesystems;NOFS framework;transparent access;remote data sets;Web services;application developers;object-oriented framework;glue code;filesystem contract;physical memory;caching;Fuses;Object oriented modeling;Memory management;Contracts;Libraries;Context;Kernel},
doi={10.1109/EIT.2012.6220733},
ISSN={2154-0373},
month={May},}


@ARTICLE{5999784,
  abbr={IEEE Magazine},
author={K. {L"{a}ufer} and G. K. {Thiruvathukal} and D. {Dennis}},
journal={Computing in Science Engineering}, title={Moving Academic Department Functions to Social Networks and Clouds: Initial Experiences},
year={2011},
volume={13},
number={5},
pages={84-89},
abstract={This paper discusses about moving academic department functions to social networks and clouds. Making these choices is easier when department members understand both the technologies themselves and the digital culture of their users.},
keywords={social networking (online);academic department function;social network;digital culture;Social network services;Electronic mail;Collaborative work;Google;Internet;Blogs;Cloud computing;Academics;Web;cloud;services;hosting;collaboration;research;scientific computing},
doi={10.1109/MCSE.2011.85},
ISSN={1558-366X},
month={Sep.},}

@inproceedings{10.1145/1967428.1967439,
author = {Kaylor, Joe and L\"{a}ufer, Konstantin and Thiruvathukal, George K.},
title = {RestFS: Resources and Services Are Filesystems, Too},
year = {2011},
isbn = {9781450306232},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1967428.1967439},
doi = {10.1145/1967428.1967439},
abstract = {We have designed and implemented RestFS, a software framework that provides a uniform, configurable connector layer for mapping remote web-based resources to local filesystem-based resources, recognizing the similarity between these two types of resources. Such mappings enable programmatic access to a resource, as well as composition of two or more resources, through the local operating system's standard filesystem application programming interface (API), scriptable file-based command-line utilities, and inter-process communication (IPC) mechanisms. The framework supports automatic and manual authentication. We include several examples intended to show the utility and practicality of our framework.},
booktitle = {Proceedings of the Second International Workshop on RESTful Design},
pages = {39–46},
numpages = {8},
location = {Hyderabad, India},
series = {WS-REST '11}
}

@INPROCEEDINGS{5612094,
  abbr={IEEE Conference},
author={J. {Kaylor} and K. {Läufer} and G. K. {Thiruvathukal}},
booktitle={2010 IEEE International Conference on Electro/Information Technology}, title={Online Layered File System (OLFS): A layered and versioned filesystem and performance analysis},
year={2010},
volume={},
number={},
pages={1-9},
abstract={We present a novel form of intra-volume directory layering with hierarchical, inheritance-like namespace unification. While each layer of an OLFS volume constitutes a subvolume that can be mounted separately in a fan-in configuration, the entire hierarchy is always accessible (online) and fully navigable through any mounted layer. OLFS uses a relational database to store its layering metadata and either a relational database or any (virtual) host file system as its backing store, along with metadata and block caching for improved performance. Because OLFS runs as a virtual file system in user-space, its capabilities are available to all existing software without modification or special privileges. We have developed a reference implementation of OLFS for FUSE based on MySQL and XFS, and conducted performance benchmarking against XFS by itself. We explore several applications of OLFS, such as enhanced server synchronization, transactional file operations, and versioning.},
keywords={inheritance;meta data;relational databases;virtual storage;online layered file system;versioned filesystem;performance analysis;intravolume directory;fan-in configuration;relational database;metadata;host file system;block caching;virtual file system;FUSE;MySQL;XFS;Fuses;Operating systems;Java;Semantics;Servers;Context},
doi={10.1109/EIT.2010.5612094},
ISSN={2154-0373},
month={May},}


@ARTICLE{5492950,
  abbr={IEEE Magazine},
author={G. K. {Thiruvathukal} and K. {Hinsen} and K. {Läufer} and J. {Kaylor}},
journal={Computing in Science Engineering}, title={Virtualization for Computational Scientists},
year={2010},
volume={12},
number={4},
pages={52-61},
abstract={The fun all began in May of 1999, when VMware launched VMware Workstation, a product that lets you run multiple operating systems simultaneously on your desktop computer. In truth, the story begins much earlier with the VM OS concept, which was pioneered (like many things) by IBM in 1960 but eventually perfected by others. The idea behind virtualization is simple. You can run multiple OSs simultaneously and share the CPU, memory, and peripherals among them. In this article, we're not going to cover what virtualization is per se. This would easily require two articles, and the actual ideas behind virtualization are well explained elsewhere. And besides, we've already covered the use of virtualization in this column for use in maintaining experimental computing laboratories. Instead, we'll focus here on a fairly simple use case that's likely to be of interest to our readers: setting up your own mini compute cluster to use for developing and testing high-performance computing applications.},
keywords={operating systems (computers);virtualization;VMware Workstation;operating system;Virtual manufacturing;Testing;Computer applications;Application software;Computer science;Workstations;Laboratories;Publishing;Computer hacking;Entropy;visualization;computational science},
doi={10.1109/MCSE.2010.92},
ISSN={1558-366X},
month={July},}


@ARTICLE{5337649,
  abbr={IEEE Magazine},
author={K. {Hinsen} and K. {Läufer} and G. K. {Thiruvathukal}},
journal={Computing in Science Engineering}, title={Essential Tools: Version Control Systems},
year={2009},
volume={11},
number={6},
pages={84-91},
abstract={Did you ever wish you'd made a backup copy of a file before changing it? Or before applying a collaborator's modifications? Version control systems make this easier, and do a lot more.},
keywords={Control systems;Automatic control;Writing;Project management;Distributed computing;Chemicals;Humans;Collaborative work;version control systems;workflow management;project management;project collaboration},
doi={10.1109/MCSE.2009.194},
ISSN={1558-366X},
month={Nov},}


@ARTICLE{5228719,
  abbr={IEEE Magazine},
author={K. {L\"{a}ufer} and G. K. {Thiruvathukal}},
journal={Computing in Science Engineering}, title={Scientific Programming: The Promises of Typed, Pure, and Lazy Functional Programming: Part II},
year={2009},
volume={11},
number={5},
pages={68-75},
abstract={This second installment picks up where Konrad Hinsen's article "The Promises of Functional Programming" from the July/August 2009 issue left off, covering static type inference and lazy evaluation in functional programming languages. In the first installment in this series on functional programming, Konrad Hinsen introduced the functional programming paradigm, which encourages recursion and higher-order functional abstraction in algorithms. In this second installment, we explore several other aspects of the functional paradigm. Using examples in the Closure, Java, and Haskell languages, we discuss some of the benefits of static typing with type inference and pure, side-effect-free functional programming with lazy evaluation. In particular, we argue that these features make Haskell a compelling choice for general software development. The scientific computing community, however, likely require better numeric library support and efficient functional versions of scientific algorithms before accepting Haskell more widely.},
keywords={functional languages;functional programming;mathematics computing;program control structures;program diagnostics;reasoning about programs;software libraries;type theory;scientific programming;functional programming language;higher-order functional abstraction;static type inference;lazy evaluation;Haskell language;software development;numeric library support;scientific algorithm;Functional programming;Java;Inference algorithms;Scientific computing;Software libraries;Dynamic programming;Computer languages;Arithmetic;Virtual machining;Runtime;Functional programming},
doi={10.1109/MCSE.2009.147},
ISSN={1558-366X},
month={Sep.},}


@ARTICLE{4784398,
author={K. {Läufer} and G. K. {Thiruvathukal} and R. {Nishimura} and C. R. {Martínez-Eiroa}},
journal={Computing in Science Engineering}, title={Putting a Slug to Work},
year={2009},
volume={11},
number={2},
pages={62-68},
abstract={Although novel architectures such as cell processors, graphics processors, and FPGAs are growing in popularity, conventional microprocessor designs pack a punch in a small footprint and are widely supported by commodity operating system and development tools. In this installment of Scientific Programming, we're going to talk about our initial foray into embedded Linux running on the slug, which is the pet name for the Linksys NSLU2, a home "appliance" aimed at providing network-attached storage.},
keywords={Linux;microprocessor chips;storage management;microprocessor design;embedded Linux;Linksys NSLU2;network-attached storage;Linux;Packaging;Local area networks;Home computing;Portable computers;Hardware;World Wide Web;Home appliances;Operating systems;Home automation;Scientific programming;slug;NSLU2;embedded systems;distributed systems},
doi={10.1109/MCSE.2009.35},
ISSN={1558-366X},
month={March},}


@ARTICLE{4653209,
  abbr={IEEE Magazine},
author={G. K. {Thiruvathukal} and K. {Läufer}},
journal={Computing in Science Engineering}, title={What I Did on My Summer Vacation},
year={2008},
volume={10},
number={6},
pages={76-81},
abstract={This article discusses the continuing importance of requirements, managing Web content, free public Wi-Fi and a personal transition to Internet telephony.},
keywords={content management;formal specification;Internet telephony;wireless LAN;Web content management;free public Wi-Fi;Internet telephony;requirements analysis;formal specification;Internet;Web pages;HTML;Software standards;Standards development;Programming;Home computing;Content management;Guidelines;Writing;Requirements;Web content management;public Wi-Fi;Internet telephony;scientific programming},
doi={10.1109/MCSE.2008.159},
ISSN={1558-366X},
month={Nov},}


@ARTICLE{4653200,
  abbr={IEEE Magazine},
author={V. {Kindratenko} and G. K. {Thiruvathukal} and S. {Gottlieb}},
journal={Computing in Science Engineering}, title={High-Performance Computing Applications on Novel Architectures},
year={2008},
volume={10},
number={6},
pages={13-15},
abstract={As chip designers struggle to increase the speed of conventional microprocessors, the scientific computing community is turning its attention to alternative architectures that utilize computational accelerators to improve the application performance. This special issue of CiSE examines several examples of computationally demanding applications implemented on novel high-performance computing architectures and points out the challenges and opportunities that these new architectures bring up.},
keywords={Computer applications;Computer architecture;Application software;Field programmable gate arrays;High performance computing;Supercomputers;Concurrent computing;Parallel programming;Scientific computing;Acceleration;HPC;novel computer architectures;scientific computing;high-performance computing},
doi={10.1109/MCSE.2008.149},
ISSN={1558-366X},
month={Nov},}


@INPROCEEDINGS{4554352,
  abbr={IEEE Conference},
author={M. {Bone} and P. F. {Nabicht} and K. {L"{a}ufer} and G. K. {Thiruvathukal}},
booktitle={2008 IEEE International Conference on Electro/Information Technology}, title={Taming XML: Objects first, then markup},
year={2008},
volume={},
number={},
pages={488-493},
abstract={Processing markup in object-oriented languages often requires the programmer to focus on the objects generating the markup rather than the more pertinent domain objects. The BetterXML framework aims to improve this situation by allowing the programmer to develop a domain-specific object model as usual and later bind this model to preexisting or newly generated markup. To this end, the framework provides two types of object trees, XElement and NaturalXML, for representing XML documents. XElement goes beyond DOM-like automatic parsing of XML by supporting the custom mapping of elements to domain objects; NaturalXML allows the mapping of existing domain objects to XML elements using class metadata. Both types of object trees can be inflated and deflated by means of a common intermediate representation in the form of an event stream. Finally, the framework includes the XML Intermediate Representation (XIR), a lossless record-oriented representation of XML documents for efficient streaming and other types of data exchange.},
keywords={meta data;object-oriented languages;tree data structures;XML;XML document;object-oriented language;meta data;common intermediate representation;XML intermediate representation;lossless record-oriented representation;data exchange;object trees;XML;Object oriented modeling;Programming profession;Bones;Laboratories;Computer science;Grounding;Tree data structures;Data structures;Writing},
doi={10.1109/EIT.2008.4554352},
ISSN={2154-0373},
month={May},}


@ARTICLE{4454434,
  abbr={IEEE Magazine},
author={J. {Kaylor} and G. K. {Thiruvathukal}},
journal={Computing in Science Engineering}, title={A Virtual Computing Laboratory},
year={2008},
volume={10},
number={2},
pages={65-69},
abstract={Many institutions choose to do periodic imaging of computers, which is both painstaking and limiting in terms of keeping software up to date. The authors describe an approach that builds on existing virtualization technologies.},
keywords={software engineering;virtual reality;virtual computing;periodic imaging;virtualization;software engineering;Laboratories;Computer networks;Hardware;Costs;Software maintenance;Electrical engineering;Application software;Operating systems;Java;Software standards;scientific programming;virtualization;parallel programming;machine imaging},
doi={10.1109/MCSE.2008.46},
ISSN={1558-366X},
month={March},}


@INPROCEEDINGS{4228151,
  abbr={IEEE Conbference},
author={N. {Mehta} and Y. {Kanitkar} and K. {L"{a}ufer} and G. K. {Thiruvathukal}},
booktitle={2007 IEEE International Parallel and Distributed Processing Symposium}, title={A Model-Driven Approach to Job/Task Composition in Cluster Computing},
year={2007},
volume={},
number={},
pages={1-8},
abstract={In the general area of high-performance computing, object-oriented methods have gone largely unnoticed. In contrast, the computational neighborhood (CN), a framework for parallel and distributed computing with a focus on cluster computing, was designed from ground up to be object-oriented. This paper describes how we have successfully used UML in the following model-driven, generative approach to job/task composition in CN. We model CN jobs using activity diagrams in any modeling tool with support for XMI, an XML-based external representation of UML models. We then export the activity diagrams and use our XSLT-based tool to transform the resulting XMI representation to CN job/task composition descriptors.},
keywords={parallel processing;Unified Modeling Language;workstation clusters;XML;model-driven approach;job-task composition descriptors;cluster computing;object-oriented methods;computational neighborhood;parallel computing;distributed computing;UML;Unified Modeling Language;activity diagrams;XML-based external representation;XMI representation;Object oriented modeling;Distributed computing;Concurrent computing;Unified modeling language;Parallel processing;Supercomputers;Computer science;Hardware;Laboratories;Personal communication networks},
doi={10.1109/IPDPS.2007.370423},
ISSN={1530-2075},
month={March},}


@ARTICLE{4100932,
  abbr={IEEE Magazine},
author={G. K. {Thiruvathukal}},
journal={Computing in Science Engineering}, title={Project Hosting: Expanding the Scientific Programmer's Toolbox},
year={2007},
volume={9},
number={2},
pages={70-75},
abstract={Emerging technologies such as free and open source project hosting will hopefully broaden interest in scientific programming in a business context},
keywords={natural sciences computing;software development management;project hosting;scientific programming;Licenses;Software maintenance;Advertising;Distributed computing;Testing;Open source software;Robustness;Discussion forums;project hosting;Google;Google Code},
doi={10.1109/MCSE.2007.36},
ISSN={1558-366X},
month={March},}


@ARTICLE{4052528,
  abbr={IEEE Magazine},
author={K. {L"{a}ufer} and G. K. {Thiruvathukal} and B. {Gonzalez}},
journal={Computing in Science Engineering}, title={A Hike through a Post-EJB J2EE Web Application Architecture, Part III},
year={2007},
volume={9},
number={1},
pages={82-95},
abstract={By incorporating automated component, integration, and acceptance testing into the various tiers of a lightweight lava 2 Enterprise Edition (J2EE) Web application architecture, developers can shorten the development cycle and increase the quality of their work},
keywords={integrated software;Java;object-oriented programming;program testing;Post-EJB J2EE Web application architecture;Java 2 Enterprise Edition;automated components;software integration;acceptance testing;Service oriented architecture;Packaging;Java;Linear regression;Business communication;Runtime;Relational databases;Authentication;Automatic testing;World Wide Web;Java;J2EE;programming languages;unit testing},
doi={10.1109/MCSE.2007.2},
ISSN={1558-366X},
month={Jan},}


@ARTICLE{1717321,
  abbr={IEEE Magazine},
author={G. K. {Thiruvathukal} and K. {L"{a}ufer} and B. {Gonzalez}},
journal={Computing in Science Engineering}, title={Unit Testing Considered Useful},
year={2006},
volume={8},
number={6},
pages={76-87},
abstract={Testing is an important part of application development hardware engineers, in particular, have a long established history of testing for the obvious reason that it's awfully hard to rebuild a microprocessor every time a bug pops up in the design stage-not to mention the enormous headaches such bugs generate on the software side. In this installment of Scientific Programming, we'll discuss the role of testing in the software development process and examine ways to leverage automated unit testing in your projects},
keywords={program testing;unit testing;scientific programming;software development testing;System testing;Books;Internet;Software testing;Calendars;Organizing;Switches;Hardware;History;Production;software development life cycle;SDLC;software engineering;testing},
doi={10.1109/MCSE.2006.124},
ISSN={1558-366X},
month={Nov},}


@INPROCEEDINGS{1630793,
  abbr={IEEE Conference},
author={P. M. {Aarestad} and A. {Ching} and G. K. {Thiruvathukal} and A. N. {Choudhary}},
booktitle={Sixth IEEE International Symposium on Cluster Computing and the Grid (CCGRID'06)}, title={Scalable Approaches for Supporting MPI-IO Atomicity},
year={2006},
volume={1},
number={},
pages={35-42},
abstract={Scalable atomic and parallel access to noncontiguous regions of a file is essential to exploit high performance I/O as required by large-scale applications. Parallel I/O frameworks such as MPI I/O conceptually allow I/O to be defined on regions of a file using derived datatypes. Access to regions of a file can be automatically computed on a perprocessor basis using the datatype, resulting in a list of (offset, length) pairs. We describe three approaches for implementing lock serving (whole file, region locking, and byterange locking) and compare the various approaches using three noncontiguous I/O benchmarks. We present the details of the lock server architecture and describe the implementation of a fully-functional prototype that makes use of a lightweight message passing library and red/black trees.},
keywords={Testing;Application software;Large-scale systems;Libraries;File servers;Prototypes;Message passing;Data visualization;Computer science;Concurrent computing},
doi={10.1109/CCGRID.2006.88},
ISSN={},
month={May},}


@ARTICLE{1563966,
  abbr={IEEE Magazine},
author={G. K. {Thiruvathukal}},
journal={Computing in Science Engineering}, title={Home networking},
year={2006},
volume={8},
number={1},
pages={84-91},
abstract={Although most of the ideas behind networking are relatively straightforward, several interesting technical and business decisions must be made as an ongoing part of the process. In this first installment of what I hope turns into a discussion about more advanced applications, the focus is on revealing the secrets in a typical home router/switch. (Here, a router has both switching and routing functions).},
keywords={home computing;computer networks;home computer network;home networking;switching;routing;Internet;Home automation;IP networks;Home computing;Network address translation;Ethernet networks;Local area networks;Wireless LAN;Maintenance engineering;Computer networks;home networking;scientific programming;DNS},
doi={10.1109/MCSE.2006.8},
ISSN={1558-366X},
month={Jan},}


@ARTICLE{1267615,
  abbr={IEEE Magazine},
author={G. K. {Thiruvathukal} and K. {Lauffer}},
journal={Computing in Science Engineering}, title={Natural XML for data binding, processing, and persistence},
year={2004},
volume={6},
number={2},
pages={86-92},
abstract={The article explains what you need to do to incorporate XML directly into your computational science application. The exploration involves the use of a standard parser to automatically build object trees entirely from application-specific classes. This discussion very much focuses on object-oriented programming languages such as Java and Python, but it can work for non-object-oriented languages as well. The ideas in the article provide a glimpse into the Natural XML research project.},
keywords={natural sciences computing;XML;program compilers;persistent objects;Natural XML research project;data binding;data persistence;computational science;standard parser;object trees;application-specific classes;object-oriented programming languages;nonobject-oriented languages;XML;Java;Data structures;Programming profession;Object oriented modeling;Aging;Tree data structures;Visual BASIC;Writing},
doi={10.1109/MCISE.2004.1267615},
ISSN={1558-366X},
month={March},}


@ARTICLE{1255825,
  abbr={IEEE Magazine},
author={G. K. {Thiruvathukal}},
journal={Computing in Science Engineering}, title={XML and computational science},
year={2004},
volume={6},
number={1},
pages={74-80},
abstract={The Extensible Markup Language (XML) is a specification for document interchange that the World Wide Web Consortium (W3C) developed in 1998. In many ways, XML is the lingua franca among programming language enthusiasts, and proponents argue that it could potentially solve the multitude of data management and analysis problems the entire computing industry currently faces. XML might make a real difference, especially in computing, engineering, and the mathematical sciences, in part because we can use it with different languages. The author presents some background and lightweight examples of XML usage, describes some XML component frameworks along with their purpose and applicability to computational science, and discusses some technical obstacles to overcome for the language to be taken seriously in computational science.},
keywords={XML;electronic data interchange;natural sciences computing;programming;XML;document interchange;data management;mathematical sciences;component frameworks;computational science;technical obstacles;XML;Computational modeling;Web sites;Writing;Astrophysics;Scientific computing},
doi={10.1109/MCISE.2004.1255825},
ISSN={1558-366X},
month={Jan},}


@INPROCEEDINGS{1240586,
  abbr={IEEE Conference},
author={{Wei-Keng} Liao and {Alok Choudhary} and K. {Coloma} and G. K. {Thiruvathukal} and L. {Ward} and E. {Russell} and N. {Pundit}},
booktitle={2003 International Conference on Parallel Processing, 2003. Proceedings.}, title={Scalable implementations of MPI atomicity for concurrent overlapping I/O},
year={2003},
volume={},
number={},
pages={239-246},
abstract={For concurrent I/O operations, atomicity defines the results in the overlapping file regions simultaneously read/written by requesting processes. Atomicity has been well studied at the file system level, such as POSIX standard. We investigate the problems arising from the implementation of MPI atomicity for concurrent overlapping write access and provide two programming solutions. Since the MPI definition of atomicity differs from the POSIX one, an implementation that simply relies on the POSIX file systems does not guarantee correct MPI semantics. To have a correct implementation of atomic I/O in MPI, we examine the efficiency of three approaches: I) file locking, 2) graph-coloring, and 3) process-rank ordering. Performance complexity for these methods are analyzed and their experimental results are presented for file systems including NFS, SGI's XFS, and IBM's GPFS},
keywords={computational complexity;graph colouring;message passing;multiprocessing programs;network operating systems;parallel machines;MPI atomicity implementations;concurrent overlapping I/O operations;message passing interface;POSIX file systems;MPI semantics;file locking;graph-coloring;process-rank ordering;performance complexity;NFS file system;SGI XFS file system;IBM GPFS file system;parallel machines;File systems;Large-scale systems;Concurrent computing;Laboratories;Performance analysis;Programming;Hardware;Bandwidth;Application software;Multidimensional systems},
doi={10.1109/ICPP.2003.1240586},
ISSN={0190-3918},
month={Oct},}


@ARTICLE{976439,
  abbr={IEEE Magazine},
author={G. K. {Thiruvathukal}},
journal={Computing in Science Engineering}, title={Java at middle age: enabling Java for computational science},
year={2002},
volume={4},
number={1},
pages={74-84},
abstract={Java's early history explains its lure to this day. Java is alive and well, running on just about every computing platform, from handhelds to high-end servers such as multiprocessors. Implementations of Java for Windows, Macintosh (including OS X), and Linux have all reached sufficient maturity and are in widespread use. Performance and resource usage remain a problem in most Java implementations, but the language is improving all the time. In this article, I examine the lure of Java for computational science, discuss the Java Grande effort to work with Sun, and identify areas for improvement. I focus on language and implementation issues that must be solved for Java to be taken seriously for computationally focused codes. As a motivational tool, I include a number of reflections on the C# language from Microsoft, which many claim is nothing more than Java with a new syntax. I excise a number of sections from the specification documentation to demonstrate that specific Java Grande Forum (JGF) recommendations are implemented in the current version of Microsoft's C#. What is particularly interesting (but not necessarily verifiable) is that language appearing in the Microsoft C# specification proper often appears to paraphrase similar points raised in the JGF documents available at www.javagrande.org.},
keywords={Java;program compilers;Java;language;implementation;C# language;Microsoft;Java Grande Forum;Java;Libraries;Application software;Large-scale systems;Computer languages;Sun;Linux;Internet;Sockets;XML},
doi={10.1109/5992.976439},
ISSN={1558-366X},
month={Jan},}


@INPROCEEDINGS{846602,
  abbr={IEEE Conference},
author={X. {Shen} and G. {Thiruvathukal} and {W.-K.} {Liao} and A. {Choudhary} and A. {Singh}},
booktitle={Proceedings Fourth International Conference/Exhibition on High Performance Computing in the Asia-Pacific Region}, title={A Java graphical user interface for large-scale scientific computations in distributed systems},
year={2000},
volume={1},
number={},
pages={478-484 vol.1},
abstract={Large-scale scientific applications present great challenges to computational scientists in terms of obtaining high performance and in managing large datasets. These applications (most of which are simulations) may employ multiple techniques and resources in a heterogeneously distributed environment. Effective working in such an environment is crucial for modern large-scale simulations. In this paper, we present an integrated Java graphical user interface (IJ-GUI) that provides a control platform for managing complex programs and their large datasets easily. As far as performance is concerned, we present and evaluate our initial implementation of two optimization schemes: data replication and data prediction. Data replication can take advantage of 'temporal locality' by caching the remote datasets on local disks; data prediction, on the other hand, provides prefetch hints based on the datasets' past activities that are kept in databases. We first introduce the data contiguity concept in such an environment that guides data prediction. The relationship between the two approaches is discussed.},
keywords={Java;graphical user interfaces;large-scale systems;digital simulation;natural sciences computing;distributed programming;software performance evaluation;replicated databases;cache storage;integrated Java graphical user interface;IJ-GUI;large-scale scientific computations;distributed systems;performance;large data-set management;large-scale simulations;heterogeneously distributed environment;control platform;complex program management;optimization schemes;data replication;data prediction;temporal locality;remote data-set caching;local disks;prefetch hints;data-set past activities;databases;data contiguity;Java;Graphical user interfaces;Large-scale systems;Computer interfaces;Distributed computing;Computational modeling;Visual databases;Analytical models;Data analysis;Data visualization},
doi={10.1109/HPC.2000.846602},
ISSN={},
month={May},}


@INPROCEEDINGS{5727762,
author={W. T. {O'Connell} and G. K. {Thiruvathukal} and T. W. {Christopher}},
booktitle={1994 Internatonal Conference on Parallel Processing Vol. 2}, title={Distributed Memo: A Heterogeneously Distributed and Parallel Software Development Environment},
year={1994},
volume={2},
number={},
pages={57-64},
abstract={Heterogeneously distributed and parallel computing environments are highly dependent on hardware, data migration, and protocols. The result is significant difficulty in software reuse, portability across platforms, and an increased overall development effort. The appearance of a shared directory of unordered queues can be provided by integrating heterogeneous computers transparently. This integration provides a conducive environment for parallel and distributed application development, by abstracting the issues of hardware and communication. Object oriented technology is exploited to provide this seamless environment.},
keywords={Heterogeneous computing. Parallel and distributed processing. Directories of unordered queues. Dynamic Data Migration. Portability. Extensibility.},
doi={10.1109/ICPP.1994.94},
ISSN={},
month={Aug},}


@INPROCEEDINGS{153848,
author={G. K. {Thiruvathukal} and T. W. {Christopher}},
booktitle={[1991] Proceedings. The Fifth International Parallel Processing Symposium}, title={A simulation of demand-driven dataflow: translation from Lucid into MDC language},
year={1991},
volume={},
number={},
pages={634-637},
abstract={Message Driven Computation (MDC) is a model of computation with which they have been experimenting at the Illinois Institute of Technology. The authors aim to prove the viability of MDC in practice for the expression of parallel algorithms and the implementation of functional and dataflow programming languages. In the paper they discuss their implementation of the Lucid programming language in MDC. The discussion presents a subset of Lucid which illustrates the principles of Lucid, Message Driven Computing, and the translation into and the interpretation of dataflow graphs.<>},
keywords={parallel algorithms;demand-driven dataflow;Lucid;MDC;Message Driven Computation;parallel algorithms;dataflow graphs;Concurrent computing;Distributed computing;Computational modeling;Computer languages;Filters;History;Computer science;Parallel algorithms;Parallel programming;Message passing},
doi={10.1109/IPPS.1991.153848},
ISSN={},
month={April},}


@ARTICLE{8291785,
author={F. {Sullivan} and N. {Chonacky} and I. {Beichl} and G. K. {Thiruvathukal}},
journal={Computing in Science Engineering}, title={Former CiSE EICs Reflect on the Magazines 20th Anniversary},
year={2018},
volume={20},
number={1},
pages={3-7},
abstract={Former CiSE EICs reflect on the magazine’s 20th anniversary.},
keywords={anniversary;history of computing;Computing in Science & Engineering},
doi={10.1109/MCSE.2018.011111118},
ISSN={1558-366X},
month={January},}


@ARTICLE{8123480,
author={G. F. {Hurlburt} and G. K. {Thiruvathukal} and M. R. {Lee}},
journal={IT Professional}, title={The Graph Database: Jack of All Trades or Just Not SQL?},
year={2017},
volume={19},
number={6},
pages={21-25},
abstract={This special issue of IT Professional focuses on the graph database. The graph database, a relatively new phenomenon, is well suited to the burgeoning information era in which we are increasingly becoming immersed. Here, the guest editors briefly explain how a graph database works, its relation to the relational database management system (RDBMS), and its quantitative and qualitative pros and cons, including how graph databases can be harnessed in a hybrid environment. They also survey the excellent articles submitted for this special issue.},
keywords={Special issues and sections;Graphical models;Databases;graph database;big data;NoSQL;relational database},
doi={10.1109/MITP.2017.4241475},
ISSN={1941-045X},
month={November},}


@INPROCEEDINGS{7836156,
author={J. {Payton} and T. {Barnes} and A. {Decker} and K. {Eiselt} and G. {Thiruvathukal}},
booktitle={2016 Research on Equity and Sustained Participation in Engineering, Computing, and Technology (RESPECT)}, title={Welcome},
year={2016},
volume={},
number={},
pages={1-1},
abstract={Welcome to the 2nd annual RESPECT conference, which is co-located with the 11th annual STARS Celebration. Inspired by the Computer Science For All initiative, our theme of “CS += All”, is a programming notation that gives the instruction to add the contents of the variable “All” to the current value of the variable “CS”. In other words, we want to increase the value of computing by providing access to computing education for all people. This theme grows from our belief that the engagement of diverse people in computing is a matter of equity - all people deserve the opportunity to engage in work that is both lucrative and integral to solving increasingly complex global challenges. We hope that the RESPECT conference will inspire you to continue to increase diversity, promote an inclusive culture, and break down barriers for equity in computing.},
keywords={},
doi={10.1109/RESPECT.2016.7836156},
ISSN={},
month={Aug},}


@ARTICLE{7723786,
author={G. K. {Thiruvathukal}},
journal={Computing in Science Engineering}, title={El Fin},
year={2016},
volume={18},
number={6},
pages={4-6},
abstract={EIC George K. Thiruvathukal says farewell in his final "from the editors" message.},
keywords={scientific computing},
doi={10.1109/MCSE.2016.106},
ISSN={1558-366X},
month={Nov},}


@ARTICLE{7426247,
author={T. {Barnes} and J. {Payton} and G. K. {Thiruvathukal} and K. E. {Boyer} and J. {Forbes}},
journal={Computing in Science Engineering}, title={Guest Editors' introduction},
year={2016},
volume={18},
number={2},
pages={6-8},
abstract={The guest editors introduce best papers on broadening participation in computing from the RESPECT'15 conference. The five articles presented here are part one of a two-part series representing research on broadening participation in computing at all levels of education: from K-12 schools through graduate school, with a focus on diversity with regard to gender, race, and ethnicity.},
keywords={Special issues and sections;Meetings;Education;broadening participation;computer science education;equity;scientific computing},
doi={10.1109/MCSE.2016.26},
ISSN={1558-366X},
month={Mar},}


@ARTICLE{7310945,
author={G. K. {Thiruvathukal}},
journal={Computing in Science Engineering}, title={Cloudy with a Chance of Sunshine, or the Future of Magazine Publishing},
year={2015},
volume={17},
number={6},
pages={4-5},
abstract={EIC George K. Thiruvathukal describes how the cloud can revolutionize printing and how the publishing world in particular can benefit.},
keywords={cloud;cloud computing;publishing;printing;Amazon;scientific computing},
doi={10.1109/MCSE.2015.119},
ISSN={1558-366X},
month={Nov},}


@ARTICLE{7091798,
author={G. K. {Thiruvathukal}},
journal={Computing in Science Engineering}, title={The All-Digital Future and Digital CiSE},
year={2015},
volume={17},
number={3},
pages={4-5},
abstract={EIC George Thiruvathukal describes the magazine's digital future and the importance of archives--being able to access digital content in the years to come will be an important challenge for both publishers and readers.},
keywords={Digital publications;Vint Cerf;Internet;scientific computing},
doi={10.1109/MCSE.2015.60},
ISSN={1558-366X},
month={May},}


@ARTICLE{7030313,
author={A. {Terrel} and M. {Tobis} and G. K. {Thiruvathukal}},
journal={Computing in Science Engineering}, title={Scientific Software Communities},
year={2015},
volume={17},
number={1},
pages={8-10},
abstract={The articles in this issue provide some examples of how a more considered focus on the software development process can feed the development of science. Two different approaches to reproducible software practices, an approach on maintaining documentation for important base libraries, and a discussion on ways of extending a software library’s functionality to keep it relevant as a community evolves over time. These topics challenge the boundaries of what software can be for an individual and for a community. The authors expose eaknesses in our state-of-the-art practices with an eye towards a sustainable future. By using these techniques, we avoid numerous withdrawn results—a current crisis due to reliance on software without verification.},
keywords={Special issues and sections;Software development;Scientific computing;Computer applications;scientific software;knowledge sharing;reproducible research;open source;extensible software;scientific computing},
doi={10.1109/MCSE.2015.21},
ISSN={1558-366X},
month={Jan},}


@ARTICLE{7030300,
author={G. K. {Thiruvathukal}},
journal={Computing in Science Engineering}, title={The Next Generation of Computational Science and Engineering},
year={2015},
volume={17},
number={1},
pages={4-5},
abstract={Here, the Editor-in-Chief discusses ways to broaden the scope, participation, and reach of the CiSE community while also giving continuous, focused attention to the communities of practice who are so crucial in developing scientific and engineering software.},
keywords={computational science;software development;scientific computing;communities of practice;leadership computing},
doi={10.1109/MCSE.2015.26},
ISSN={1558-366X},
month={Jan},}


@ARTICLE{6798648,
author={G. K. {Thiruvathukal}},
journal={Computing in Science Engineering}, title={What We Publish in CiSE},
year={2014},
volume={16},
number={2},
pages={4-6},
abstract={Here, the Editor-in-Chief discusses what we publish in CiSE, and the best way to present work for publication in the magazine.},
keywords={computational science;scientific computing;peer review;scientific publishing;interdisciplinary thinking},
doi={10.1109/MCSE.2014.46},
ISSN={1558-366X},
month={Mar},}


@ARTICLE{6664966,
author={G. K. {Thiruvathukal} and M. {Parashar}},
journal={Computing in Science Engineering}, title={Cloud Computing [Guest editorial]},
year={2013},
volume={15},
number={4},
pages={8-9},
abstract={The guest editors discuss this special issue on cloud computing, exploring how cloud platforms and abstractions can be effectively used to support real-world science and engineering applications.},
keywords={Special issues and sections;Cloud computing;cloud computing;grids;clusters;HPC;scientific computing;high-performance computing},
doi={10.1109/MCSE.2013.78},
ISSN={1558-366X},
month={July},}


@ARTICLE{6664963,
author={G. K. {Thiruvathukal}},
journal={Computing in Science Engineering}, title={What's in an Algorithm?},
year={2013},
volume={15},
number={4},
pages={4-5},
abstract={How can we rethink the definition of algorithm, and through that, produce another age of enlightenment in modern scientific programming and software development in general? Removing these limitations in our own thoughts is the key for expanding the possibilities in alternative paradigms and exploiting parallel and next-generation hardware.},
keywords={algorithm;parallel computing;parallel programming;modern functional programming;scientific computing},
doi={10.1109/MCSE.2013.94},
ISSN={1558-366X},
month={July},}


@ARTICLE{6550002,
author={G. K. {Thiruvathukal}},
journal={Computing in Science Engineering}, title={Productivity in the Cognitive Overload Era},
year={2013},
volume={15},
number={3},
pages={4-5},
abstract={Could technologies that emphasize the concept of "we" rather than "me" help modern society overcome its information overload?},
keywords={MOOCs;Piazza;e-learning;Miller's law;scientific computing;massive open online courses},
doi={10.1109/MCSE.2013.65},
ISSN={1558-366X},
month={May},}


@ARTICLE{6478747,
author={G. K. {Thiruvathukal}},
journal={Computing in Science Engineering}, title={Computational Science, Demystified … the Future, Revealed … and CiSE, 2013},
year={2013},
volume={15},
number={2},
pages={4-5},
abstract={What are some of the exciting avenues that computational science is exploring, and how can we best give a voice to such emerging ideas?},
keywords={computational science;value-added content;scientific computing},
doi={10.1109/MCSE.2013.22},
ISSN={1558-366X},
month={March},}


@ARTICLE{6415897,
author={G. K. {Thiruvathukal}},
journal={Computing in Science Engineering}, title={Who Needs Tablets? We Do},
year={2013},
volume={15},
number={1},
pages={4-6},
abstract={What role do tablets play increasingly in our daily lives? Is it possible that they could revolutionize the future of publishing and education?},
keywords={Scientific computing;Tablet computers;Electronic publishing;Internet;Online services;Publishing;online publishing;online education;tablet computers;scientific computing},
doi={10.1109/MCSE.2013.16},
ISSN={1558-366X},
month={Jan},}


@ARTICLE{6308597,
author={D. S. {Milojicic} and M. {Arlitt} and D. D. {Seligmann} and G. K. {Thiruvathukal} and C. {Timmerer}},
journal={Computer}, title={Innovation Mashups: Academic Rigor Meets Social Networking Buzz},
year={2012},
volume={45},
number={9},
pages={101-105},
abstract={News of interest to IEEE Computer Society members.},
keywords={IEEE Computer Society;mashups;Computing Now;STCs},
doi={10.1109/MC.2012.313},
ISSN={1558-0814},
month={Sep.},}


@ARTICLE{6241361,
author={G. K. {Thiruvathukal}},
journal={Computing in Science Engineering}, title={Accelerating Learning with Distance Education and Open Courseware},
year={2012},
volume={14},
number={4},
pages={4-5},
abstract={What will happen if academia disrupts traditional teaching methods by providing students with online and free academic materials?},
keywords={online education;computer science;pedagogy;distance learning;Sphinx Python documentation generator;scientific computing},
doi={10.1109/MCSE.2012.70},
ISSN={1558-366X},
month={July},}


@ARTICLE{6159196,
author={G. K. {Thiruvathukal}},
journal={Computing in Science Engineering}, title={Digging into Data},
year={2012},
volume={14},
number={2},
pages={4-5},
abstract={Computational projects such as Wordle can simplify our lives by extracting data and presenting it in a new, visually compelling way.},
keywords={Computational science;computer science;word cloud;digital humanities;scientific computing},
doi={10.1109/MCSE.2012.22},
ISSN={1558-366X},
month={March},}


@ARTICLE{5756275,
author={G. K. {Thiruvathukal}},
journal={Computing in Science Engineering}, title={Beyond CiSE and Back to the Future},
year={2011},
volume={13},
number={3},
pages={4-5},
abstract={Organizing a special issue on novel architectures for Computing Now offered lessons in what online readers want, as well as a glimpse into what's possible for CiSE.},
keywords={Online publications;multimedia content;novel architectures;scientific computing;Internet/Web},
doi={10.1109/MCSE.2011.44},
ISSN={1558-366X},
month={May},}


@ARTICLE{5492947,
author={G. K. {Thiruvathukal}},
journal={Computing in Science Engineering}, title={Your Local Cloud-Enabled Library},
year={2010},
volume={12},
number={4},
pages={5-6},
abstract={Libraries are an important onramp for technology. They're known for making books accessible and have been pioneers in database access, but many branches seem to understand that they have a vital cultural role to play, especially when it comes to technology access. Most people in American society presume such access is ubiquitous, even though a substantial percentage of the world population lacks access.},
keywords={Libraries;Physics;Cloud computing;Societies;Humans;Astronomy;Space technology;Research and development;cloud computing;libraries;access},
doi={10.1109/MCSE.2010.94},
ISSN={1558-366X},
month={July},}


@ARTICLE{5337638,
author={G. K. {Thiruvathukal}},
journal={Computing in Science Engineering}, title={Computational Thinking … and Doing},
year={2009},
volume={11},
number={6},
pages={4-4},
abstract={Computing in Science and Engineering From the Editors},
keywords={Computer science;Computer networks;Software algorithms;Application software;Medical services;Social network services;Computational modeling;Computer simulation;Collaborative tools;Collaborative software;Computing in Science and Engineering From the Editors},
doi={10.1109/MCSE.2009.190},
ISSN={1558-366X},
month={Nov},}


@ARTICLE{4454433,
author={B. {Feiereisen} and G. K. {Thiruvathukal}},
journal={Computing in Science Engineering}, title={At Issue},
year={2008},
volume={10},
number={2},
pages={60-64},
abstract={In this installment of At Issue, two of CiSE's editorial board members describe the magazine's current and future Web presence. We start with Bill Feiereisen's discussion of science on the Web and what it could mean for CiSE ("Are We There Yet?") and end with George Thiruvathukal's discussion of the challenges therein ("If We Build It, Will They Come?"). CiSE's official homepage is www.computer.org/cise; we gladly welcome comments with suggestions or feedback. You can contact lead editor (Jenny Stout; jstout

@computer.org) or write to either Bill or George (their email addresses appear at the end of their respective essays).},
keywords={Web sites;Bioinformatics;Software;Blogs;Genomics;Scientific computing;computing;science;engineering;Web 2.0;Semantic Web;social networking;wikis;blogs;At Issue},
doi={10.1109/MCSE.2008.49},
ISSN={1558-366X},
month={March},}


@ARTICLE{1401797,
author={G. K. {Thiruvathukal}},
journal={Computing in Science Engineering}, title={Guest Editors' Introduction: Cluster Computing},
year={2005},
volume={7},
number={2},
pages={11-13},
abstract={What is cluster computing? In a nutshell, it involves the use of a network of computing resources to provide a comparatively economical package with capabilities once reserved for supercomputers. In this issue, we look at certain applications of cluster computing to problem solving. As the Beowulf project and clustering revolution celebrate more than 10 years in existence, it's interesting to see what remains the same and what has changed. Let's look at a few aspects of the clustering revolution in more detail.},
keywords={Computer networks;Hardware;Linux;Ethernet networks;High performance computing;Operating systems;Supercomputers;Blades;Computer applications;Multiprocessor interconnection networks},
doi={10.1109/MCSE.2005.33},
ISSN={1558-366X},
month={March},}


@ARTICLE{8090467,
author={L. A. {Barba} and G. K. {Thiruvathukal}},
journal={Computing in Science Engineering}, title={Reproducible Research for Computing in Science Engineering},
year={2017},
volume={19},
number={6},
pages={85-87},
abstract={The editors of the new track for reproducible research outline the parameters for future peer review, submission, and access, highlighting the magazine’s previous work in this field and some of the challenges still to come.},
keywords={reproducible research;peer review;open access;scientific computing},
doi={10.1109/MCSE.2017.3971172},
ISSN={1558-366X},
month={November},}


@ARTICLE{7478508,
author={T. {Barnes} and J. {Payton} and G. K. {Thiruvathukal} and K. E. {Boyer} and J. {Forbes}},
journal={Computing in Science Engineering}, title={Best of RESPECT, Part 2},
year={2016},
volume={18},
number={3},
pages={11-13},
abstract={The guest editors introduce best papers on broadening participation in computing from the RESPECT'15 conference. The five articles presented here are part two of a two-part series representing research on broadening participation in computing. These articles study participation in intersectional ways, through the perceptions and experiences of African-American middle school girls, the sense of belonging in computing for LGBTQ students, the impact of a STEM scholarship and community development program for low-income and first-generation college students, a leadership development program, and how African-American women individually take leadership to enable their success in computing.},
keywords={Special issues and sections;Meetings;Perception;Cultural differences;Social factors;Human factors;Computer science;broadening participation;computer science education;equity;scientific computing},
doi={10.1109/MCSE.2016.51},
ISSN={1558-366X},
month={May},}


@ARTICLE{6879727,
author={M. {Parashar} and G. K. {Thiruvathukal}},
journal={Computing in Science Engineering}, title={Extreme Data [Guest editors' introduction]},
year={2014},
volume={16},
number={4},
pages={8-10},
abstract={The guest editors discuss work that can accelerate insights from extreme data, from innovative algorithmic formulations to implementation frameworks and software stacks.},
keywords={Special issues and sections;Big data;Distributed databases;Computational modeling;Data models;Geospatial analysis;Data analysis;Software engineering;data-intensive science and engineering;Big Data workflows;dictionary learning;distributed hash tables;Sloan Digital Sky Server;geospatial datasets;scientific computing},
doi={10.1109/MCSE.2014.83},
ISSN={1558-366X},
month={July},}


@ARTICLE{5678564,
author={G. K. {Thiruvathukal}},
journal={Computing in Science Engineering}, title={Books [reviews of "Networks, Crowds, and Markets: Reasoning about a Highly-Connected World; Easley, D. and Kleinberg, J.; 2010 and "Introduction to High Performance Computing for Scientists and Engineers"; Hager, G. and Wellein, G.; 2011) [Book review]},
year={2011},
volume={13},
number={1},
pages={5-8},
abstract={Two books are reviewed in this issue. },
keywords={Book reviews;Internet;Web and internet services;High performance computing;Graph theory;Publishing;Computer networks;Scientific computing;concurrency;parallel computing;high-performance computing},
doi={10.1109/MCSE.2011.3},
ISSN={1558-366X},
month={Jan},}


@ARTICLE{5076314,
author={G. K. {Thiruvathukal}},
journal={Computing in Science Engineering}, title={Introducing Computing Now},
year={2009},
volume={11},
number={4},
pages={8-10},
abstract={One of Computing Now's editorial board members talks about this IEEE Computer Society initiative and all that it has to offer members and nonmembers alike.},
keywords={societies;Computing Now;editorial board members;IEEE Computer Society;Twitter;Gold;Portals;Internet;Storms;Feeds;Writing;Publishing;Physics;Maintenance engineering;Computing Now;Web 2.0;social networking;CiSE magazine;computer science},
doi={10.1109/MCSE.2009.124},
ISSN={1558-366X},
month={July},}


@ARTICLE{1324553,
author={G. K. {Thiruvathukal}},
journal={Computing in Science Engineering}, title={Gentoo Linux: the next generation of Linux},
year={2004},
volume={6},
number={5},
pages={66-74},
abstract={The first item of business when installing a Linux system is to pick a distribution, or distro. The plethora of options includes Red Hat, Lindows, Debian, SuSe, Mandrake, Gen-too, and even the emerging Chinese standard, Red Flag. Gentoo Linux is a significant distro for several reasons. First, the entire OS is maintained from source code. Even when binary packages are directly installed, metadata shows precisely how the package was configured and built. Second, we need install the OS only once. We can get upgrades of the latest packages from one of the myriad Gentoo mirrors. Finally, it's completely free, regardless of intended use and configuration. Unlike Red Hat Linux, Gentoo Linux doesn't have a commercial edition, meaning users don't have to worry that something might be missing in the free version. This paper looks at some of Gentoo's salient features.},
keywords={Unix;software reviews;Gentoo Linux;Red Hat;Lindows;Debian;SuSe;Mandrake;Chinese standard;Red Flag;operating system;metadata;Gentoo mirrors;Linux;Kernel;Mirrors;Packaging machines;Operating systems;Application software;Instruction sets;Universal Serial Bus;Plugs;Next generation networking;scientific programming;Gentoo;Linux},
doi={10.1109/MCSE.2004.37},
ISSN={1558-366X},
month={Sep.},}


@ARTICLE{1306951,
author={G. K. {Thiruvathukal} and K. {L"{a}ufer}},
journal={Computing in Science Engineering}, title={Plone and content management},
year={2004},
volume={6},
number={4},
pages={88-95},
abstract={This paper looks at Plone, one of the best content management systems. Plone is distributed under a free open-source license: the cost of getting started is only limited to the time you have available to set up the software on a server. Plone is written in Python and uses the Zope application server infrastructure; it runs on most modern operating systems. Plone can be customized for the maintenance of content - entirely over the Web.},
keywords={Internet;content management;public domain software;Web design;software packages;Plone software;content management systems;free open-source license;Python;Zope application server infrastructure;content maintenance;World Wide Web;Web pages;Web sites;XML;Internet;Content management;HTML;XML;Operating systems;Calendars;Collaboration;Education;Dictionaries;Speech;Vocabulary;content management systems;XML},
doi={10.1109/MCSE.2004.19},
ISSN={1558-366X},
month={July},}
